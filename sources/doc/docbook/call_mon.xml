<section id="call_mon">
<title>Call Monitoring</title>
    <para>
Call monitoring is a way of using replacement function to collect statistics about target functions calls.
    </para>
    <para>
KEDR contains collection of payloads, which may be used for call monitoring purpose. They store information about what kernel functions was called from the target module and in what order, parameters, which was passed to this functions and result returned. Then this information may be used by user-space application at runtime with the help of <link linkend="capture_trace">kedr_capture_trace</link> tool.
    </para>
    <para>
Format of information stored is similar to the trace format of the ftrace tool.
Here is example of such trace (header line is shown only for description purpose):
    <programlisting>
  TASK-PID CPU#  TIMESTAMP     FUNCTION
--------------------------------------------------------------------
insmod-709 [000] 99689.618433: target_session_begins: target_module: "kedr_sample_target"
insmod-709 [000] 99689.627529: called___kmalloc: arguments(184, d0), result: d80c3600
dd-743 [000] 99861.116151: called___kmalloc: arguments(4000, d0), result: decaa000
dd-743 [000] 99861.116614: called_copy_from_user: arguments(decaa000, 09b00000, 1), result: 0
...
rmmod-17250 [000] 102326.651693: target_session_ends: target_module: "kedr_sample_target"
    </programlisting>
'FUNCTION' field has format <code>called_&lt;function-name&gt;: arguments(&lt;arguments-list&gt;), result:&lt;value-returned&gt;</code> for functions calls and <code>target_session_&lt;begins|end&gt;: target_module: "&lt;target-module-name&gt;"</code> for markers of load and unload target module.
    </para>
    <para>
Only calls to the subset of all kernel functions is detected, but this subset may be easy extended by implemented you own modules (see <xref linkend="custom_callm_payloads"/>). Here is a full list of the payload modules, which may be used for call monitoring, and lists of functions, detected by each module. (Function name in '[' and ']' means, that this function is detected only if it is exported by the kernel; only one of functions, delimited by '/', is detected, depended on which of them is exported by the kernel).
    </para>
    <para>
<itemizedlist mark='opencircle'>
<listitem>kedr_cm_cmm.ko:
    <simplelist type='vert'>
    <member>__kmalloc</member>
	<member>krealloc</member>
	<member>kfree</member>
	<member>kmem_cache_alloc</member>
	<member>[kmem_cache_alloc_notrace]</member>
	<member>kmem_cache_free</member>
    </simplelist>
</listitem>
<listitem>kedr_cm_user_space_access.ko:
    <simplelist type='vert'>
    <member>copy_to_user/_copy_to_user</member>
    <member>copy_from_user/_copy_from_user</member>
    </simplelist>
</listitem>
<listitem>kedr_cm_mutexes.ko:
    <simplelist type='vert'>
    <member>__mutex_init</member>
	<member>mutex_lock</member>
	<member>mutex_lock_interruptible</member>
	<member>mutex_trylock</member>
	<member>mutex_unlock</member>
    </simplelist>
</listitem>
<listitem>kedr_cm_spinlocks.ko:
    <simplelist type='vert'>
    <member>_spin_lock_irqsave/_raw_spin_lock_irqsave</member>
	<member>_spin_unlock_irqrestore/_raw_spin_unlock_irqrestore</member>
    </simplelist>
    additionally, with "enable_full_spinlock" option set,
    <simplelist type='vert'>
    <member>_spin_lock/_raw_spin_lock</member>
    <member>_spin_lock_irq/_raw_spin_lock_irq</member>
	<member>_spin_unlock/_raw_spin_unlock</member>
    <member>_spin_unlock_irq/_raw_spin_unlock_irq</member>
    </simplelist>
</listitem>
<listitem>kedr_cm_waitqueue.ko:
    <simplelist type='vert'>
	<member>__wake_up</member>
	<member>init_waitqueue_head/__init_waitqueue_head</member>
	<member>prepare_to_wait</member>
	<member>finish_wait</member>
	<member>remove_wait_queue</member>
	<member>add_wait_queue</member>
	<member>add_wait_queue_exclusive</member>
    </simplelist>
</listitem>
<listitem>kedr_cm_capable.ko:
    <simplelist type='vert'>
    <member>capable></member>
    </simplelist>
</listitem>
<listitem>kedr_cm_vmm.ko:
    <simplelist type='vert'>
    <member>vmalloc</member>
	<member>__vmalloc</member>
	<member>vmalloc_user</member>
	<member>vmalloc_node</member>
	<member>vmalloc_32</member>
	<member>vfree</member>
    </simplelist>
</listitem>
<listitem>kedr_cm_schedule.ko:
    <simplelist type='vert'>
	<member>schedule</member>
	<member>[preempt_schedule]</member>
	<member>_cond_resched</member>
	<member>schedule_timeout</member>
	<member>schedule_timeout_uninterruptible</member>
	<member>schedule_timeout_interruptible</member>
	<member>io_schedule</member>
    <member>cond_resched_lock/__cond_resched_lock</member>
    </simplelist>
</listitem>
</itemizedlist>
    </para>
</section>
