<section id="functions_support">
<title>Trampolines creation</title>

<para>
This section describes how to create <firstterm><link linkend="trampoline">trampolines</link></firstterm> for <link linkend="target_function">target functions</link> which intended to be intercepted by payloads.
</para>

<section id="functions_support.why">
<title>Why trampolines are needed</title>

<para>
The main purpose of <link linkend="trampoline">trampolines</link> is to provide simultaneuos work of payload modules, even when they intercept same functions.
</para>
<para>
For example, you can use call monitoring payload while using fault simulation payload, and it whill trace results of functions which may fail. Though no one of these payloads has knowledge about existence of another.
</para>
<para>
Support for simultaneous work of payloads appeared only in 0.3 version of the KEDR. In previous versions, fault simulation payloads had to duplicate output to the trace, which was performed in call monitoring payloads. But, nevertheless, one couldn't use both leak checker and fault simulation functionality at the same time.
</para>

</section> <!-- "functions_support.why" -->
<!-- ================================================================ -->

<section id="functions_support.define">
<title>How to define trampolines</title>

<para>
Code, which creates trampolines, is generated by KEDR generator from datafile.
This datafile should be written for every payload module and should contain information about name and signatures of all target functions that are intercepted in payload module.
</para>
<para>
What is KEDR generator and how it works are described in section <xref linkend="using_gen"/>.
Here we described what data should contain datafile for create trampolines from it.
</para>
<para>
At the global scope, datafile may contain only one parameter.
<variablelist>
    <varlistentry><term>header</term>
        <listitem>contain include directives, which define all interested target functions.</listitem>
    </varlistentry>
</variablelist>
</para>
<para>
For each target function a group should be prepared. Each group should contain definitions for the following parameters:
<variablelist>
    <varlistentry><term>function.name</term>
        <listitem>name of the target function</listitem>
    </varlistentry>
    <varlistentry><term>returnType</term>
        <listitem>return type of the target function if it is not void, otherwise shouldn't be defined at all</listitem>
    </varlistentry>
    <varlistentry><term>arg.type</term>
        <listitem>(multi-valued) types of the parameters of the target function, starting with the first one. If the function has no parameters, shouldn't be assigned at all.</listitem>
    </varlistentry>
    <varlistentry><term>arg.name</term>
        <listitem>(multi-valued) names of the parameters of the target function, starting with the first one. If the function has no parameters, shouldn't be assigned at all.</listitem>
    </varlistentry>
</variablelist>
</para>
<para>

</para>
</section> <!-- "functions_support.define" -->

<section id="functions_support.stub">
<title>Stub for definition of trampolines</title>

<para>
Here is an example of trampolines definition for functions <code>int foo(void* p)</code> and <code>void bar(int x, int y, const char* str)</code>. It is assumed that these functions are defined in <filename>&lt;foo.h&gt;</filename> and <filename>&lt;bar.h&gt;</filename> headers correspondingly.
</para>
<para>
<programlisting>
header =&gt;&gt;
#include &lt;foo.h&gt;
#include &lt;bar.h&gt;
&lt;&lt;

[group]
    # Name and return type of the target function
    function.name = foo
    returnType = int

    # Names and types of the arguments of the target function
    arg.type = void*
    arg.name = p
# End of the group of definitions for foo().

[group]
    # Name and return type of the target function
    function.name = bar

    # Names and types of the arguments of the target function
    arg.type = int
    arg.name = x

    arg.type = int
    arg.name = y

    arg.type = const char*
    arg.name = str

# End of the group of definitions for bar().

</programlisting>
</para>

</section> <!-- "functions_support.stub" -->


<section id="functions_support.generate">
<title>Trampolines generating</title>

<para>
For generate source file with trampolines from datafile, use following command:
<programlisting>
<replaceable>&lt;kedr_install_dir&gt;</replaceable>/lib/kedr/kedr_gen <replaceable>&lt;kedr_install_dir&gt;</replaceable>/share/kedr/templates/function_support.c \
    <replaceable>datafile</replaceable> &gt; <replaceable>functions_support.c</replaceable>
</programlisting>
This create source file <replaceable>functions_support.c</replaceable>, which then may be used when building payload module.
</para>

</section> <!-- "functions_support.generate" -->

</section>
