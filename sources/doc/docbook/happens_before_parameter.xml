<section id="happens_before_parameter">
<title>Parameter trace.happensBefore for call monitor and fault simulation payloads</title>
    <para>
There is a parameter, which changes control flow of the replacement function in call monitor and fault simulation payloads:
<variablelist>
    <varlistentry><term>trace.happensBefore</term>
        <listitem>If this parameter is defined (presize value has no meaning), trace will be output before target function calls. With this parameter defined, <symbol>middleCode</symbol> parameter shouldn't be used, also <varname>returnValue</varname> variable shouldn't be used.</listitem>
    </varlistentry>
</variablelist>
    </para>
    <para>
The main purpose of using <symbol>trace.happensBefore</symbol> parameter is collecting correct trace on multithreaded systems. Suppose, two threads call <function>mutex_lock</function> and <function>mutex_unlock</function> functions for the same mutex. One of the correct order of this calls is:
<programlisting>
[1]    <function>mutex_lock</function>
[1]    <function>mutex_unlock</function>
[2]    <function>mutex_lock</function>
[2]    <function>mutex_unlock</function>
</programlisting>
([<replaceable>n</replaceable>] means that operation is performed by the thread <replaceable>n</replaceable>).
    </para>
    <para>
So, one may expect, that same order will be fixed by the trace:
<programlisting>
1    called_mutex_lock
1    called_mutex_unlock
2    called_mutex_lock
2    called_mutex_unlock
</programlisting>
    </para>
    <para>
As described in the <xref linkend="custom_callm_payloads"/>, replacement function firstly calls the target function, and after it returns, outputs it's parameters to the trace. So, next order of the instructions is possible:
<programlisting>
[1]    [call replacement function for <function>mutex_lock</function>]
[1]    mutex_lock
[1]    output("called_mutex_lock")
[1]    [replacement function for <function>mutex_lock</function> returns]
[1]    [call replacement function for mutex_unlock]
[1]    mutex_unlock
[2]    [call replacement function for <function>mutex_lock</function>]
[2]    mutex_lock
[2]    output("called_mutex_lock")
[2]    [replacement function for <function>mutex_lock</function> returns]
[1]    output("called_mutex_unlock")
[1]    [replacement function for <function>mutex_unlock</function> returns]
[2]    [call replacement function for mutex_unlock]
[2]    mutex_unlock
[2]    output("called_mutex_unlock")
[2]    [replacement function for <function>mutex_unlock</function> returns]
</programlisting>
    </para>
    <para>
Even call order of the target functions is correct, these instructions produce trace, which reflect impossible order of the target functions calls:
<programlisting>
1    called_mutex_lock
2    called_mutex_lock
1    called_mutex_unlock
2    called_mutex_unlock
</programlisting>
    </para>
    <para>
The thing is that kernel internally enforce ordering of
<programlisting>
...
[1]    mutex_unlock
...
[2]    mutex_lock
...
</programlisting>
But because kernel knows nothing about output trace, operations which output trace may be disoredered.
    </para>
    <para>
For get correct trace, we need use <symbol>trace.happensBefore</symbol> parameter for replacement function for <function>mutex_unlock</function>. At abstract level, this attribute means <quote>Whenever <function>mutex_unlock</function> is <emphasis>internally</emphasis> ordered before some other function, this order will be preserved in the trace</quote>.
    </para>
    <para>
Note, though <function>mutex_lock</function> function also should be ordered before corresponding <function>mutex_unlock</function>:
<programlisting>
...
[1]    mutex_lock
...
[1]    mutex_unlock
...
</programlisting>
this order is not processing by the <symbol>trace.happensBefore</symbol> parameter. The difference is that this order should be provided <emphasis>externally</emphasis> - by the user of this functions, that is target module. But target module really call replacement functions, so it enforce ordering <function>replacement-for-mutex_lock</function> before <function>replacement-for-mutex_unlock</function>. This order, in turn, automatically enforce order <function>mutex_lock</function> before <function>mutex_unlock</function>, and order <function>output-for-mutex_lock</function> before <function>output-for-mutex_unlock</function>. So trace automatically reflects order of funcitons calls in this case.
    </para>
    <para>
If <symbol>trace.happensBefore</symbol> parameter is defined, control flow of the replacement functions is described in pseudocode as follows:
<programlisting>
<symbol>returnType</symbol> replacement_function(<symbol>arg.name</symbol>...)
{
    <symbol>prologue</symbol>
    output(<symbol>trace.formatString</symbol>, <symbol>trace.param.name</symbol>...);
    target_function(<symbol>arg.name</symbol>...);
    <symbol>epilogue</symbol>
}
</programlisting>
    </para>
    <para>
For fault simulation replacement function, if <symbol>trace.happensBefore</symbol> parameter is defined, control flow is:
<programlisting>
<symbol>returnType</symbol> replacement_function(<symbol>arg.name</symbol>...)
{
    <symbol>prologue</symbol>
    output(<symbol>trace.formatString</symbol>, <symbol>trace.param.name</symbol>...);
    if(indicator_function(<symbol>fpoint.param.name</symbol>...) == 0)
    {
        target_function(<symbol>arg.name</symbol>...);
    }
    else
    {
        <symbol>fpoint.error_code</symbol>;
    }
    <symbol>epilogue</symbol>
}
</programlisting>
    </para>
    <para>
Another example of internal happens-before relationship is one between <function>kfree</function> and <function>__kmalloc</function> functions. This relationship reflects fact that <function>__kmalloc</function> cannot return address, which has previously returned by another <function>__kmalloc</function> call and has not processed by <function>kfree</function>. With using of <symbol>trace.happensBefore</symbol> parameter one can enforce same ordering in the trace:
<programlisting> 
    [group]
	# Name and return type of the target function
	function.name = kfree

	# Names and types of the arguments of the target function
	arg.type = void*
	arg.name = p
	
	# The parameters to be output to the trace.
	trace.param.type = void*
	trace.param.name = p

	# Happens-before relationship with kmalloc
	<emphasis>trace.happensBefore = yes</emphasis>

	# The format string to be used for trace output.
	trace.formatString = "arguments: (%p)"

# End of the group of definitions for kfree().
</programlisting>
    </para>
    <note><para>
For reflecting in the trace fact, that function <function>A</function> has happens-before ordering with function <function>B</function>, one should define <symbol>trace.happensBefore</symbol> parameter for the function <function>A</function> and <emphasis>do not define it</emphasis> for the function <function>B</function>. There is no way to enforce two different orderings for one function, such as <function>krealloc</function>, which may be modelled as <function>__kmalloc</function> + <function>kfree</function>.
    </para>
    <para>
Usually, functions for which <symbol>trace.happensBefore</symbol> parameter make a sence, do not return value and are not interesting for fault simulation.
    </para></note>
</section>
