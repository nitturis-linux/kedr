<glossary id="glossary">
<title>Glossary</title>

<note><para>
Note that the terms <firstterm>driver</firstterm> and <firstterm>kernel module</firstterm> have differences in meaning in some cases. However, unless specifically stated, they are used interchangeably in this manual as the synonyms for <firstterm>loadable kernel module</firstterm>. The meaning is as it is defined <ulink url="http://en.wikipedia.org/wiki/Loadable_kernel_module">in Wikipedia</ulink>.
</para></note>

<glossentry id="kedr">
<glossterm><emphasis>KEDR</emphasis></glossterm>

<glossdef>
    <para>
A system to analyze <phrase role="emphasized">KE</phrase>rnel-mode <phrase role="emphasized">D</phrase>rivers in <phrase role="emphasized">R</phrase>untime. The tools provided by KEDR rely heavily on the means to intercept calls made by the kernel module under analysis. These call interception facilities are provided by the core components of KEDR.
    </para>
</glossdef>
</glossentry>

<glossentry id="target_module">
<glossterm><emphasis>Target module, target driver</emphasis></glossterm>

<glossdef>
    <para>
A kernel module to be analyzed. 
    </para>
</glossdef>
</glossentry>

<glossentry id="target_function">
<glossterm><emphasis>Target function</emphasis></glossterm>

<glossdef>
    <para>
To perform analysis of the target module, it can be necessary to intercept calls to some functions made by it. These functions are called <firstterm>target functions</firstterm>. For example, to analyse how memory is allocated and freed by the target module, one may need to intercept calls to <code>__kmalloc()</code>, <code>kfree()</code>, etc.
    </para>
    <para>
The target functions can be exported by the <firstterm>base kernel</firstterm> (<firstterm><quote>kernel core</quote></firstterm>) or by other kernel modules.
    </para>
    <para>
By choosing appropriate <link linkend="payload_module">payload modules</link>, the user may select the groups of functions the calls to which are to be intercepted.
    </para>
</glossdef>
</glossentry>

<glossentry id="trampoline">
<glossterm><emphasis>Trampoline</emphasis></glossterm>

<glossdef>
    <para>
KEDR system instruments the <link linkend="target_module">target module</link> so that the calls to the <link linkend="target_function">target functions</link> are replaced in it with the calls to special <firstterm>trampoline functions</firstterm>. 
    </para>
    <para>
A trampoline function has the same signature as the corresponding target function. When the trampoiline function is called, it receives the same argument values as the target function would. The trampoline function calls <link linkend="pre_handler">pre handlers</link>, <link linkend="replacement_function">replacement function</link> and <link linkend="post_handler">post handlers</link>, which can be provided by the user (via custom <link linkend="payload_module">payload modules</link>). If replacement function is not provided, target function will be called instead.
    </para>
</glossdef>
</glossentry>


<glossentry id="replacement_function">
<glossterm><emphasis>Replacement function</emphasis></glossterm>

<glossdef>
    <para>
A replacement function is a user-provided function which is called <emphasis>instead</emphasis> of the corresponding <link linkend="target_function">target function</link>.
    </para>
    <para>
When the replacement function is called, it receives the same argument values as the target function would and additional argument of type <type linkend="payload_api.function_call_info">struct kedr_function_call_info*</type>. Return value of the replacement function is interpreted as a value returned by the target function.
    </para>
    <para>
Last argument of the replacement function currently contains only <varname>return_address</varname> field, which is set to the address of the instruction to which target function would return. This field should be used instead of expression like <code>__builtin_return_address(0)</code> because replacement function is called by the trampoline, which changes the stack of function calls.
    </para>
    <para>
A replacement function may, for example, do some actions instead of calling target function. The outer effect of these actions may be the same as effect of target function call, but also may differ from it. Another usage of replacement function is to call the target function or to perform other actions conditionally. This conditional call is a key point of the fault simulation payloads. 
    </para>
    <para>
If replacement function should call (unconditionally) target function along with perfoming other actions, it is better to use <link linkend="pre_handler">pre handler</link> or <link linkend="post_handler">post handler</link> instead of replacement function. The thing is that several payloads, which intercept one target function, may work together only if no more than one of them replace this function with another one, while using pre and post handlers are not limited.
    </para>
    <para>
Precise signature of the replacement function is described in <xref linkend="payload_api.replace_pair"/>. Apart from having the correct signature, KEDR system imposes no additional restrictions on the replacement functions. 
    </para>
</glossdef>
</glossentry>

<glossentry id="pre_handler">
<glossterm><emphasis>Pre handler</emphasis></glossterm>

<glossdef>
    <para>
A pre handler is a user-provided function which is called <emphasis>before</emphasis> corresponding <link linkend="target_function">target function</link>.
    </para>
    <para>
When the pre handler is called, it receives the same argument values as the target function will recieve later and additional argument of type <type linkend="payload_api.function_call_info">struct kedr_function_call_info*</type>.    
    </para>
    <para>
Last argument of the pre handler currently contains only <varname>return_address</varname> field, which is set to the address of the instruction to which target function would return. This field should be used instead of expression like <code>__builtin_return_address(0)</code> because pre handler is called by the trampoline, which changes the stack of function calls.
    </para>
    <para>
A pre handler may, for example, output function arguments to the trace. Even post handler is seems more suitable for this purpose, because it may also output return value of the function, in some case pre handler is more preferable (see, for example, <xref linkend="happens_before_parameter"/>).
    </para>
    <para>
Another possible usage of pre handler is to change function arguments. It cannot change argument's value, because this change will be lost when handler return, but it can change argument's content in case when the argument it pointer to some data.
    </para>
    <note>
        <para>
Simultaneous using of payload with pre handler, which change some target function arguments, and other payloads with pre handlers for same function should be done with care. Even KEDR itself do not forbid such using, the order of call of pre handlers is unspecified, so it is undefined whether one pre handler will see initial parameters or ones' changed by another payload.
        </para>
        <para>
In the future, pre handlers and post handlers, registered with different payloads, may be ordered in some way.
        </para>
    </note>
    <para>
Precise signature of the pre handler is described in <xref linkend="payload_api.pre_pair"/>. Apart from having the correct signature, KEDR system imposes no additional restrictions on the pre handlers. 
    </para>
</glossdef>
</glossentry>

<glossentry id="post_handler">
<glossterm><emphasis>Post handler</emphasis></glossterm>

<glossdef>
    <para>
A post handler is a user-provided function which is called <emphasis>after</emphasis> corresponding <link linkend="target_function">target function</link>.
    </para>
    <para>
When the post handler is called, it receives the same argument values as the target function has recieved before, return value of the target function (if target function return any value) and additional argument of type <type linkend="payload_api.function_call_info">struct kedr_function_call_info*</type>.    
    </para>
    <para>
Last argument of the post handler currently contains only <varname>return_address</varname> field, which is set to the address of the instruction to which target function would return. This field should be used instead of expression like <code>__builtin_return_address(0)</code> because post handler is called by the trampoline, which changes the stack of function calls.
    </para>
    <para>
A post handler may, for example, collect function arguments and return value and write them to the trace. 
    </para>
    <para>
Precise signature of the post handler is described in <xref linkend="payload_api.post_pair"/>. Apart from having the correct signature, KEDR system imposes no additional restrictions on the post handlers. 
    </para>
</glossdef>
</glossentry>

<glossentry id="payload_module">
<glossterm><emphasis>Payload module</emphasis></glossterm>

<glossdef>
    <para>
A payload module is a kernel module that actually contains <link linkend="pre_handler">pre handlers</link>, <link linkend="post_handler">post handlers</link> and <link linkend="replacement_function">replacement functions</link> for a particular group of target functions. The core components of KEDR use this data when instrumenting the target module.
    </para>
    <para>
It is payload modules rather than KEDR core that define which data should be collected about the target module, how the execution of the latter should be altered (if it should be at all), etc. Different sets of payload modules may allow to perform different kinds of analysis of the target module.
    </para>
    <para>
Currently, KEDR provides payload modules for several types of data collection and analysis operations. Custom payload modules can be provided by the user. As long as the payload modules rely on the API defined by KEDR, KEDR makes no difference between the payloads provided with it and the ones supplied by the user.
    </para>
    <para>
Different payload modules may be used simultaneously as long as them do not provide different replacement functions for one target function.
    </para>
</glossdef>
</glossentry>

<glossentry id="fault_simulation">
<glossterm><emphasis>Fault simulation</emphasis></glossterm>

<glossdef>
    <para>
Fault simulation is one of the many ways to check reliability of a target kernel module. It can be used, among other things, to see if the target module behaves correctly when the operating system fails to complete some of its requests. For example, you may want to find out if the target module crashes the system when there is not enough memory for its operations or if there is no contiguous memory block of a size greater than N, etc. 
    </para>
    <para>
KEDR allows to perform fault simulation on the target module. The scenarios (what function calls to make fail and in what conditions) can be provided and configured by the user as well. A number of common scenarios is already supported by KEDR by default.
    </para>
    <para>
The fault simulation scenarios are defined by the <link linkend="fault_simulation_point">fault simulation points</link> (<quote>What to make fail?</quote>) and <link linkend="fault_simulation_indicator">fault simulation indicators</link> (<quote>In what conditions should this fail?</quote>).
    </para>
</glossdef>
</glossentry>

<glossentry id="fault_simulation_point">
<glossterm><emphasis>Fault simulation point</emphasis></glossterm>

<glossdef>
    <para>
Fault simulation point is a location in a kernel module where it should be decided whether to continue execution as usual (<quote>normal path</quote>) or go to a path provided to handle an error of some kind (<quote>error path</quote>) or something else. This is similar to an ordinary conditional construct in a module. The decision, however, is made based on some predefined scenario rather than on the actual presence of the error conditions. 
    </para>
    <para>
A scenario for a simulation point may be contrived. Sometimes, it does not even take into account whether the normal path and the error path are possible. For example, the default memory allocation manager may return error only if there is no memory chunk of appropriate size. A custom allocation manager, however, may contain a fault simulation point with a scenario that additionally prescribes to make every second allocation  request fail, no matter the requested size.
    </para>
    <para>
In KEDR, fault simulation points are used in the replacement functions. This allows to simulate failures of the target functions according to user-defined scenarios and to see if the target kernel module handles these failures properly (see <xref linkend="fault_simulation"/>). In the normal operation of the target module, such failures can be very rare. Therefore, errors in handling of these failures can be harder to notice and debug. KEDR facilitates checking such paths in the target module.
    </para>
</glossdef>
</glossentry>

<glossentry id="fault_simulation_indicator">
<glossterm><emphasis>Fault simulation indicator</emphasis></glossterm>

<glossdef>
    <para>
A fault simulation indicator is usually a function used in a <link linkend="fault_simulation_point">fault simulation point</link> to make a decision, whether to execute <quote>normal</quote> or <quote>error path</quote> in the code. More often than not, it is a boolean function which returns values corresponding to <quote>make fail</quote> and <quote>do not make fail</quote> decisions. One might say that an indicator implements the scenario for a fault simulation point (i.e., it answers to the question, <quote>In what conditions should this fail?</quote>). 
    </para>
    <para>
In KEDR, fault simulation points and indicators are largely independent on one another. That is, a fault simulation point may use almost any indicator and the indicator can be easily changed at runtime. The only restriction is that if an indicator expects some parameters from the point, the indicator can not be set for the point that does not provide these parameters. For example, consider an indicator implementing the following scenario <quote>make this fail if <code>size</code> parameter is greater than 1024</quote>. If a particular fault simulation point corresponding to some target function has nothing like <code>size</code> parameter, KEDR will not allow to use that indicator for this point (it makes no sense anyway).
    </para>
</glossdef>
</glossentry>
</glossary>
