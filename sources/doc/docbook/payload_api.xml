<section id="payload_api">
<title>API for Payload Modules</title>

<para>
This section describes the interface that the KEDR core provides for the <link 
linkend="payload_module">payload modules</link>.
</para>

<important><para>
When interacting with the KEDR core, the payload modules should rely only on
the API described here. Other types, functions, macros, constants, etc., 
that can be found in the headers and the source files of KEDR system are for
internal use only and subject to change.
</para></important>

<section id="payload_api.header">
<title>Header File</title>

<para>
The API is declared in the header file that a payload module should #include:
</para>

<programlisting><![CDATA[
#include <kedr/core/kedr.h>
]]></programlisting>

</section> <!-- "payload_api.header" -->
<!-- ================================================================ -->

<section id="payload_api.function_call_info">
<title>struct kedr_function_call_info</title>

<para>
Represents information about a particular function call which is passed to <link linkend="pre_handler">pre handlers</link>, <link linkend="replacement_function">replacement function</link> and <link linkend="post_handler">post handlers</link> in addition to the parameters of the target function.
</para>

<programlisting><![CDATA[
struct kedr_function_call_info
{
    void *return_address; 
};
]]></programlisting>

<para>
Currently this structure has only one field, <code>return_address</code>. This is the address of the location right after the call to target function (i.e. the address of the next machine instruction). This value should be used instead of __builtin_return_address(0) in the <link linkend="pre_handler">pre handlers</link>, <link linkend="replacement_function">replacement functions</link> and <link linkend="post_handler">post handlers</link>. This is because these functions are actually called by a trampoline function rather than directly from the place where the target is called. What is usually needed, however, is not the return address of a handler but rather the return address of the target function (to output call stack, etc.).
</para>

</section> <!-- "payload_api.function_call_info" -->

<section id="payload_api.pre_pair">
<title>struct kedr_pre_pair</title>

<para>
Defines a <link linkend="pre_handler">pre handler</link>.
</para>

<programlisting><![CDATA[
struct kedr_pre_pair
{
    void *orig; 
    void *pre; 
};
]]></programlisting>

    
<para>
<varname>orig</varname> - address of the <link linkend="target_function">target function</link> the calls to which are to be intercepted.
</para>

<para>
<varname>pre</varname> - address of the <link linkend="pre_handler">pre handler</link> that should be called before the target function. Pre handler takes the same parameters as the target function plus an additional parameter of type <type linkend="payload_api.function_call_info">struct kedr_function_call_info *</type>. Pre handler does not return value.
</para>

<para>
Example:
</para>

<programlisting><![CDATA[
/*
 * Function foo() has the following signature:
 *
 *  long foo(int a, void *p);
 */

void 
pre_foo(int a, void *p, struct kedr_function_call_info *call_info)
{
    /* ... */
};

struct kedr_pre_pair pre_foo_pair = {
    (void *)&foo,
    (void *)&pre_foo
};
]]></programlisting>

</section> <!-- "payload_api.pre_pair" -->

<section id="payload_api.post_pair">
<title>struct kedr_post_pair</title>

<para>
Defines a <link linkend="post_handler">post handler</link>.
</para>

<programlisting><![CDATA[
struct kedr_post_pair
{
    void *orig; 
    void *post; 
};
]]></programlisting>

    
<para>
<varname>orig</varname> - address of the <link linkend="target_function">target function</link> the calls to which are to be intercepted.
</para>

<para>
<varname>post</varname> - address of the <link linkend="post_handler">post handler</link> which should be called after the target function. Post handler takes the same parameters as target function plus a parameter of the same type as the return value of the target function (if it is non-void) plus an additional parameter of type <type linkend="payload_api.function_call_info">struct kedr_function_call_info *</type>. Post handler does not return value.
</para>

<para>
Examples:
</para>

<programlisting><![CDATA[
/*
 * Function foo() has the following signature:
 *
 *  long foo(int a, void *p);
 */

void 
post_foo(int a, void *p, long returnValue, 
    struct kedr_function_call_info *call_info)
{
    /* ... */
};

struct kedr_post_pair post_foo_pair = {
    (void *)&foo,
    (void *)&post_foo
};
]]></programlisting>

<programlisting><![CDATA[
/*
 * Function bar() has the following signature:
 *
 *  void bar(int a, void *p);
 */

void 
post_bar(int a, void *p, struct kedr_function_call_info *call_info)
{
    /* ... */
};

struct kedr_post_pair post_bar_pair = {
    (void *)&bar,
    (void *)&post_bar
};
]]></programlisting>


</section> <!-- "payload_api.post_pair" -->

<section id="payload_api.replace_pair">
<title>struct kedr_replace_pair</title>

<para>
Defines a <link linkend="replacement_function">replacement function</link>.
</para>

<programlisting><![CDATA[
struct kedr_replace_pair
{
    void *orig; 
    void *replace; 
};
]]></programlisting>

    
<para>
<varname>orig</varname> - address of the <link linkend="target_function">target function</link> the calls to which are to be intercepted.
</para>

<para>
<varname>replace</varname> - address of the <link linkend="replacement_function">replacement function</link> which should be called <emphasis>instead</emphasis> of the target function. Replacement function takes the same parameters as the target function plus an additional parameter of type <type linkend="payload_api.function_call_info">struct kedr_function_call_info *</type>. Replacement function should return value of the same type as the target function.
</para>

<para>
Examples:
</para>

<programlisting><![CDATA[
/*
 * Function foo() has the following signature:
 *
 *  long foo(int a, void *p);
 */

long 
replace_foo(int a, void *p, struct kedr_function_call_info *call_info)
{
    /* ... */
};

struct kedr_replace_pair replace_foo_pair = {
    (void *)&foo,
    (void *)&replace_foo
};
]]></programlisting>

<programlisting><![CDATA[
/*
 * Function bar() has the following signature:
 *
 *  void bar(int a, void *p);
 */

void 
replace_bar(int a, void *p, struct kedr_function_call_info *call_info)
{
    /* ... */
};

struct kedr_replace_pair replace_bar_pair = {
    (void *)&bar,
    (void *)&replace_bar
};
]]></programlisting>


</section> <!-- "payload_api.replace_pair" -->

<!-- ================================================================ -->

<section id="payload_api.payload">
<title>struct kedr_payload</title>

<para>
Represents a payload module from the point of view of the KEDR core. 
</para>

<programlisting><![CDATA[
struct kedr_payload
{
    struct module *mod;
    struct kedr_replace_pair *replace_pairs;
    struct kedr_pre_pair *pre_pairs;
    struct kedr_post_pair *post_pairs;
    void (*target_load_callback)(struct module *);
    void (*target_unload_callback)(struct module *);
};
]]></programlisting>

<para>
<varname>mod</varname> - the payload module itself. This field is usually 
initialized with <code>THIS_MODULE</code> value.
</para>

<para>
<varname>replace_pairs</varname> - array of <link linkend="payload_api.replace_pair">replacement function definitions</link>. This array should be terminated by element with <varname>orig</varname> field set to NULL. NULL value of <varname>replace_pairs</varname> is equivalent to an empty array.
</para>

<para>
<varname>pre_pairs</varname> - array of <link linkend="payload_api.pre_pair">pre handler definitions</link>. This array should be terminated by element with <varname>orig</varname> field set to NULL. NULL value of <varname>pre_pairs</varname> is equivalent to an empty array.
</para>

<para>
<varname>post_pairs</varname> - array of <link linkend="payload_api.post_pair">post handler definitions</link>. This array should be terminated by element with <varname>orig</varname> field set to NULL. NULL value of <varname>post_pairs</varname> is equivalent to an empty array.
</para>

<para>
<code>target_load_callback</code> and <code>target_unload_callback</code>. If 
not NULL, these callbacks are called by KEDR core after the target module is loaded (but 
before it begins its initialization) and, respectively, when the target module 
has done cleaning up and is about to unload. The callbacks are passed the 
pointer to the target module as an argument. If a callback is NULL, it is 
ignored.
</para>

<note><para>
Note that if the target module fails to initialize itself (and its init function returns an error as a result) and <code>target_unload_callback</code> is not NULL, this callback will be called nevertheless.
</para></note>

<para>
Each payload module has usually a single global instance of <code>struct kedr_payload</code> structure 
and passes its address when registering and unregistering itself with the 
KEDR core.
</para>

<para>
Example:
</para>

<programlisting><![CDATA[
/* Pre handlers and the corresponding target functions */
static struct kedr_pre_pair pre_pairs[] = {
    { (void *)&_copy_to_user, (void *)&pre__copy_to_user},
    { (void *)&_copy_from_user, (void *)&post__copy_from_user},
    { NULL,}
};

/* Post handlers and the corresponding target functions */
static struct kedr_post_pair post_pairs[] = {
    { NULL, }
};


/* Replacement functions and the corresponding target functions */
static struct kedr_replace_pair replace_pairs[] = {
    { (void *)&capable, (void *)repl_capable},
    { NULL,}
};


static struct kedr_payload payload = {
    .mod                    = THIS_MODULE,
    .pre_pairs              = pre_pairs,
    .post_pairs             = post_pairs,
    .replace_pairs          = replace_pairs,
    .target_load_callback   = NULL,
    .target_unload_callback = NULL
};
]]></programlisting>

</section> <!-- "payload_api.payload" -->
<!-- ================================================================ -->

<section id="payload_api.register">
<title>kedr_payload_register()</title>

<programlisting><![CDATA[
int 
kedr_payload_register(struct kedr_payload *payload);
]]></programlisting>

<para>
This function registers a payload module with the KEDR core. 
</para>

<para>
<code>payload</code> is the address of the <code>kedr_payload</code> 
instance identifying the payload module (see <xref 
linkend="payload_api.payload"/>).
</para>

<para>
The function returns 0 if successful, an error code otherwise (the general 
rules of the kernel functions apply here too).
</para>

<para>
The function is usually called in the init function of the payload module.
</para>

</section>

<!-- "payload_api.register" -->
<!-- ================================================================ -->

<section id="payload_api.unregister">
<title>kedr_payload_unregister()</title>

<programlisting><![CDATA[
void 
kedr_payload_unregister(struct kedr_payload *payload);
]]></programlisting>

<para>
This function unregisters the payload module from the KEDR core. After 
this is done, KEDR no longer uses this payload module (unless the latter 
registers itself again).
</para>

<para>
<code>payload</code> should be the same address as it was in the corresponding 
call to <link linkend="payload_api.register">kedr_payload_register()</link>.
</para>

<para>
The function is usually called in the cleanup (exit) function of the payload
module.
</para>

</section>

<!-- "payload_api.unregister" -->
<!-- ================================================================ -->



<section id="payload_api.in_init">
<title>kedr_target_module_in_init()</title>

<programlisting><![CDATA[
int
kedr_target_module_in_init(void);
]]></programlisting>

<para>
This function returns nonzero if the target module is currently loaded and 
is executing its init function at the moment, 0 otherwise.
</para>

<para>
In fact, the function just checks whether the target module has already
dropped its <code><quote>.init.*</quote></code> sections (what the modules 
do after they have completed their initialization). Therefore the function 
will always return 0 if the init function was not marked as 
<code><quote>__init</quote></code> in the 
target module. This should not be a big problem though.
</para>

<para>
This function can be useful to implement particular fault simulation 
scenarios (like <quote>fail everything after init</quote>), etc.
</para>

<para>
Note however that there is a chance that the target module will complete
its initialization after kedr_target_module_in_init() has determined that
the target is in init but before the return value of 
kedr_target_module_in_init() is used. It is up to the user of the target
module to ensure that no request is made to the module until its 
initialization is properly handled.
</para>

<para>
It is allowed to call this function from atomic context.
</para>

</section>

<!-- "payload_api.in_init" -->
<!-- ================================================================ -->

<section id="payload_api.functions_support_register()">
<title>functions_support_register()</title>

<programlisting><![CDATA[
int 
functions_support_register(void);
]]></programlisting>

<para>
This function loads the trampoline functions for the target functions processed by the payload module. It should be called before the first call to <function>kedr_payload_register</function>.
</para>

<para>
This function is defined in auxiliary source file for the payload module rather than in KEDR core module itself. Because of this, it is needed to declare this function as <code>extern</code> in the source file where it is used:
</para>

<programlisting><![CDATA[
extern int functions_support_register(void);
]]></programlisting>

<para>
The function returns 0 if successful, an error code otherwise (the general 
rules of the kernel functions apply here too).
</para>

<para>
The function is usually called in the init function of the payload module.
</para>

</section>

<!-- "payload_api.functions_support_register" -->

<section id="payload_api.functions_support_unregister()">
<title>functions_support_unregister()</title>

<programlisting><![CDATA[
void 
functions_support_unregister(void);
]]></programlisting>

<para>
This function unloads trampolines which has loaded by <function>functions_support_register</function>. It should be called after the last call to <function>kedr_payload_unregister</function>.
</para>

<para>
This function is defined in auxiliary source file for the payload module rather than in KEDR core module itself. Because of this, it is needed to declare this function as <code>extern</code> in the source file where it is used:
</para>

<programlisting><![CDATA[
extern void functions_support_unregister(void);
]]></programlisting>

<para>
The function is usually called in the cleanup (exit) function of the payload module.
</para>

</section>

<!-- "payload_api.functions_support_unregister" -->
<!-- ================================================================ -->
<section id="payload_api.stub">
<title>A Stub of a Payload Module</title>

<para>
Here is what a simple payload module may look like (this is a stub rather 
than a real module, of course).
</para>

<programlisting><![CDATA[
/* Module: stub_payload
 * 
 * Target kernel functions: 
 * 
 *   unsigned long kfoo(void *) 
 *   void *kbar(void *, unsigned int) 
 *   int kbaz(void)
 *
 * The replacement functions provided by this module have the same 
 * signatures as the respective target functions, but different names. */
/* ===================================================================== */

#include <linux/module.h>
#include <linux/init.h>

MODULE_AUTHOR("<Some name here>");
MODULE_LICENSE("<Some license here>");
/* ===================================================================== */

#include <kedr/base/common.h>
/* #include other necessary header files here */
/* ===================================================================== */

/* Handlers of the intercepted calls */
static void
post_kfoo(void *arg, unsigned long returnValue)
{
    /* Process the result of function, dump data to a trace, etc. */
    trace_function_call(arg, returnValue);
}

static void *
repl_kbar(void *arg, unsigned int n)
{
/* The replacement function is not required to call the target function at 
 * all. It is up to the provider of the replacement function.
 */
    if (n >= SOME_THRESHOLD) {
        return NULL; /* simulate a failure without actually calling kbar()*/
    } else {
        return kbar(arg, n);
    }
}

static int
repl_kbaz(void)
{
/* The replacement function is not required to do anything at all. */
    return 777;
}

/* ===================================================================== */

/* Replacement functions and the corresponding target functions */
static kedr_replace_pair replace_pairs[] = {
    { (void *)&kbar, (void *)&repl_kbar},
    { (void *)&kbaz, (void *)&repl_kbaz},
    {NULL,} /* the end "marker" element */
};

/* Post handlers and the corresponding target functions */
static kedr_post_pair post_pairs[] = {
    { (void *)&kfoo, (void *)&post_kfoo},
    {NULL,} /* the end "marker" element */
};

/* Pre handlers are not used by this payload */

/* Definition of struct kedr_payload */
static struct kedr_payload payload = {
    .mod                    = THIS_MODULE,
    .replace_pairs          = replace_pairs,
    .post_pairs             = post_pairs,
    .pre_pairs              = NULL,
    .target_load_callback   = NULL,
    .target_unload_callback = NULL
};
/* ===================================================================== */

/* Import the functions that load and unload trampolines */
extern int functions_support_register(void);
extern void functions_support_unregister(void);

static void
stub_payload_cleanup_module(void)
{
    kedr_payload_unregister(&payload);

    functions_support_unregister();

    /* do other cleanup work */
}

static int __init
stub_payload_init_module(void)
{
    int result;

    /* initialize other necessary facilities */

    result = functions_support_register();
    if(result) return result;
    
    result = kedr_payload_register(&payload);
    if(result)
    {
        functions_support_unregister();
        return result;
    }
    
    return 0;
}

module_init(kedr_cm_user_space_access_init_module);
module_exit(stub_payload_cleanup_module);
/* ===================================================================== */
]]></programlisting>

</section>
<!-- "payload_api.stub" -->
<!-- ================================================================ -->

</section>
