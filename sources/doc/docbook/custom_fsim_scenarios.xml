<section id="custom_fsim_scenarios">
<title>Writing Custom Scenarios for Fault Simulation</title>
    <para>
The fault simulation scenarios described in <xref linkend="fault_sim"/> are configurable and are probably enough for many cases. If they are not, a kernel module implementing a custom <link linkend="fault_simulation_indicator">fault simulation indicator</link> can be developed. This section describes how do this using a tool provided by KEDR to generate source files from the templates. Common abilities of this tool are described in detail in <xref linkend="using_gen"/>
    </para>
    <para>
The whole infrastructure needed to build the module based on the definition file and the templates is located in <filename class='directory'>custom_indicator_fsim</filename> subdirectory in the directory where the examples provided with KEDR are installed. Here are its contents:
<variablelist>
    <varlistentry><term><filename>indicator.data</filename></term>
        <listitem>'definition' file to create the module that will implement the fault simulation indicator</listitem>
    </varlistentry>
    <varlistentry><term><filename>makefile</filename></term>
        <listitem>file for common build infrastructure for <command>make</command> utility</listitem>
    </varlistentry>
    <varlistentry><term><filename>Kbuild</filename></term>
        <listitem>file for building kernel module from C sources</listitem>
    </varlistentry>
    <varlistentry><term><filename class='directory'>templates</filename></term>
        <listitem>directory containing the templates used for generating sources from the 'definition' file</listitem>
    </varlistentry>
    <varlistentry><term><filename>calculator.c</filename>, <filename>calculator.h</filename>, <filename>control_file.c</filename>, <filename>control_file.h</filename></term>
        <listitem>additional source and header files that implement some of the indicator's functionality. These files are used for building the module.</listitem>
    </varlistentry>
</variablelist>
To use all this in development of your module, copy the contents of that directory to a directory of your choice.
    </para>
    <para>
The first and the main step is to rewrite file <filename>indicator.data</filename> to reflect the definitions of your indicator module.
    </para>
    <para>
Unlike a payload module for <link linkend="custom_callm_payloads">call monitoring</link> or <link linkend="custom_fsim_payloads">fault simulation</link> that can implement replacement functions for several target functions in a single module, each fault simulation indicator should be implemented in a separate module. So, groups are not used in the definition file for the indicator module. Only the global set of parameters is taken into account.
    </para>
    <para>
Indicator module should contain definitions of the following parameters:
<variablelist>
    <varlistentry><term>module.author</term>
        <listitem>author of the module</listitem>
    </varlistentry>
    <varlistentry><term>module.license</term>
        <listitem>license for the module</listitem>
    </varlistentry>
    <varlistentry><term>indicator.name</term>
        <listitem>name of the indicator, provided by the module. This is the very name that should be used when one applies the indicator to some target function (to be exact, to a <link linkend="fault_simulation_indicator">fault simulation point</link>).</listitem>
    </varlistentry>
    <varlistentry><term>indicator.parameter.type</term>
        <listitem>(multi-valued) types of the values that the indicator function accepts. This is an important part of the indicator and will be described later in detail. This parameter may be assigned no value at all - in this case, the indicator function will accept no parameters. </listitem>
    </varlistentry>
    <varlistentry><term>indicator.parameter.name</term>
        <listitem>(multi-valued) names of the values that the indicator function accepts.</listitem>
    </varlistentry>
    <varlistentry><term>expression.variable.name</term>
        <listitem>(multi-valued) names of variables that can be used in an expression to set a particular scenario for the indicator (see also <xref linkend="fault_sim"/>). The names themselves are by no means bound to the names of variables used in the indicator. The order of values is not important for this parameter. This parameter may even be left undefined as there are other ways to declare expression variables.</listitem>
    </varlistentry>
    <varlistentry><term>expression.variable.value</term>
        <listitem>(multi-valued) values of the corresponding expression variables that will be used during the evaluation of the expression (that is, when the indicator function is called). Typically, these values refer to the parameters of the indicator function.</listitem>
    </varlistentry>
    <varlistentry><term>expression.variable.pname</term>
        <listitem>(multi-valued) names of the parameters of the indicator function that can be used in an expression to set a particular scenario for the indicator. <code><varname>expression.variable.pname</varname> = <literal>var_a</literal></code> is equivalent to <code><varname>expression.variable.name</varname> = <literal>var_a</literal></code> + <code><varname>expression.variable.value</varname> = <literal>var_a</literal></code>. This parameter may even be left undefined as there are other ways to declare expression variables.</listitem>
    </varlistentry>
</variablelist>
    </para>
    <para>
The main characteristic of a fault simulation indicator is a set of scenarios, which it can implement. Apart from <varname>pid</varname> parameter that can be used for each generated indicator and simply restricts the <quote>area</quote> of fault simulation, <varname>expression</varname> is the only indicator's parameter, which may affect the fault simulation scenario. An expression that uses only constant integers as arguments may implement only <phrase role="pcite"><quote>always simulate fail</quote></phrase> or <phrase role="pcite"><quote>never simulate fail</quote></phrase> scenarios. But if the expression can use variables which may have different values each time the expression is evaluated, the set of supported scenarios increases dramatically.
    </para>
    <para>
One type of variable that can be used in the expression is the parameter of the target function. E.g., expression <code>(<varname>size</varname> &gt; 100)</code>, where <varname>size</varname> corresponds to the target function parameter, implements the scenario <phrase role="pcite"><quote>simulate fail when <varname>size</varname> is greater than <literal>100</literal></quote></phrase>. The only way for the indicator to implement such usage of a target function's parameter is to declare this parameter as parameter of indicator function. So, the corresponding replacement function should pass this parameter to the indicator function whenever it should choose whether it needs to simulate a failure. This behaviour of the indicator is achieved by the following definitions (assume <varname>size</varname> parameter of the target function has type <literal>size_t</literal>):
<programlisting>
indicator.parameter.type = size_t
indicator.parameter.name = size
</programlisting>
    </para>
    <para>
This fragment only defines that the indicator function itself accepts parameter <varname>size</varname>. To permit using this parameter in the expression, the following definition should be used as well:
    </para>
<programlisting>
expression.variable.pname = size
</programlisting>

    <para>
Parameters <varname>expression.variable.name</varname> and <varname>expression.variable.value</varname> may be useful for such cases:
<programlisting>
...
indicator.parameter.type = const char*
indicator.parameter.name = str
...
# Expression may use variables only with integer values, so we cannot use 
# a string parameter in it.
# But we can use the length of this string as parameter 'len'
expression.variable.name = len
expression.variable.value = strlen(str)
...
</programlisting>
<programlisting>
...
indicator.parameter.type = size_t
# Cannot use 'strlen' as name of the parameter, because strlen() is 
# the kernel function.
indicator.parameter.name = len
...
# But here 'strlen' is available - this is not a name of C variable.
expression.variable.name = strlen
# We only need to bind expression variable to its value.
expression.variable.value = len
...
</programlisting>
    </para>
    <para>
However if we declare that the indicator function accepts parameter <varname>size</varname> of type <type>size_t</type>, we make this indicator not applicable for those target functions that do not accept a parameter of that type. Or to be more exact, the indicator is not applicable for (cannot be used from) the replacement functions that do not provide a parameter of this type to indicator function. This limitation holds even if this parameter is not really used in the current scenario.
    </para>
    <para>
Although it is acceptable for the indicator to use the variables in expression, which are not derived from the indicator's parameters like 
<programlisting>
expression.variable.name = prob50
expression.variable.value = random() % 2
</programlisting>
it is not recommended, because there is a more efficient way to do this. The thing is that, the variables of this kind are evaluated every time the indicator function is called, no matter if this variable is used in the expression or not. This evaluation may take relatively long time in some cases. There is another type of variables which is applicable in such cases - <firstterm>runtime variables</firstterm>. Declaration of such variables has the following format:
<programlisting>
expression.rvariable.name = prob50
expression.rvariable.code =&gt;&gt;
    return random() % 2;
&lt;&lt;
</programlisting>
<varname>expression.rvariable.code</varname> parameter provides the code of the function which will be used whenever value of variable is <emphasis>really</emphasis> needed. The costs of such optimisation are a function call used instead of the inlined code when the value of the variable is needed, and inability to use local variables of the indicator function (and parameters of this function) to prepared the value of the runtime variable.
    </para>
    <para>
To simplify writing expressions and to make them more readable, named constants can be declared and then used there. There are two ways to do this:
<programlisting>
expression.constant.name = constant_100
expression.constant.value = 100
</programlisting>
This makes the constant with name <varname>constant_100</varname> and value 100 available for usage in the expressions.
<programlisting>
expression.constant.cname = GFP_ATOMIC
</programlisting>
This makes the constant with name <varname>GFP_ATOMIC</varname> which evaluates to GFP_ATOMIC available for usage in the expressions. Expression <code>flags == GFP_ATOMIC</code> is clearer and easier to read than <code>flags == 32</code>, isn't it?
    </para>
    <para>
Additionally, the following parameter can be defined:
<variablelist>
    <varlistentry><term>global</term>
        <listitem>code (may be multiline) that will be inserted at the global scope and its definitions will be visible everywhere in the source file of the indicator. Usually, this code contains <code>#include</code> directives for the header files containing types definitions of parameters of the indicator and declarations of the functions used to obtain the values of the parameters.</listitem>
    </varlistentry>
</variablelist>
Example of indicator for <function>kstrdup</function> function:
<programlisting>
# This module implements indicator for kmalloc-like functions.

module.author = Andrey Tsyvarev
module.license = GPL

global =&gt;&gt;
#include &lt;linux/gfp.h&gt;      /* gfp_flags constants */
#include &lt;linux/types.h&gt;    /* size_t */
&lt;&lt;

indicator.name = kmalloc

indicator.parameter.type = size_t
indicator.parameter.name = size

indicator.parameter.type = gfp_t
indicator.parameter.name = flags

expression.constant.c_name = GFP_NOWAIT
expression.constant.c_name = GFP_KERNEL
expression.constant.c_name = GFP_USER
expression.constant.c_name = GFP_ATOMIC

expression.variable.pname = size
expression.variable.pname = flags
</programlisting>
    </para>
    <para>
After writing <filename>payload.data</filename> file, you can change the value of module_name variable in the <filename>makefile</filename> and <filename>Kbuild</filename> according to the one you use as value of <quote>module.name</quote> parameter. 
    </para>
    <para>
The last step is to run <command>make</command> utility. This will invoke the code generator tool (<command>kedr_gen</command>) to create the sources for your payload module, then the module will be built.
    </para>

</section>
