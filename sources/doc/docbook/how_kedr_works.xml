<section id="how_kedr_works">
<title>How KEDR Works</title>

<para>
KEDR has a plugin-based architecture similar to the architecture of <ulink url="http://valgrind.org/">Valgrind</ulink> and other binary analysis frameworks for user-space applications and libraries.
</para>

<para>
Each data collection and analysis tool based on KEDR has at least the following parts:
</para>

<itemizedlist>
<listitem><para><emphasis>KEDR core</emphasis> - the core components provided by the framework, their main responsibility it to instrument the target module when it is loaded. The core also provides utilities to simplify commonly used operations, for example, output of the collected data, etc.</para></listitem>

<listitem><para>One or more <emphasis>tool plugins</emphasis> (<quote>payload modules</quote>) that actually collect and, if necessary, analyze the data about the target module.</para></listitem>
</itemizedlist>

<para>
The interaction between the components involved in the 
analysis of Linux kernel modules with KEDR is outlined at the figure below. The logical components related to KEDR are colored in green.
</para>

<mediaobject>
<imageobject>
    <imagedata fileref="images/system_architecture.png" format="PNG"/>
</imageobject>
<textobject>
    <phrase>KEDR: system architecture</phrase>
</textobject>
</mediaobject>

<para>
KEDR core (<firstterm><quote>Loading Detector</quote></firstterm> and <firstterm><quote>Call Instrumentation Facilities</quote></firstterm> on the figure) detect when the module to be analyzed (<firstterm>target module</firstterm>) is loaded. The notification system provided by the Linux kernel is used to do this. 
</para>

<para>
When the target has been loaded but before it begins its initialization, KEDR core takes control and instruments it, that is, it changes the memory image of that module in a special way. In particular, the calls to the functions that should be intercepted (<link linkend="target_function">target functions</link>) are replaced with the calls to the <link linkend="trampoline">trampolines</link>. A trampoline is a special function with the same signature as the corresponding target function. These trampolines call <link linkend="pre_handler">pre handlers</link>, <link linkend="replacement_function">replacement functions</link> and <link linkend="post_handler">post handlers</link> provided by <link linkend="payload_module">payload modules</link>. A payload module should register itself with KEDR core for this to work.
</para>

<para>
After the instrumentation is done, the target module is allowed to begin its initialization.
</para>

<para>
The actual analysis of the target kernel module is performed by 
<link linkend="payload_module">payload modules</link> of different types. 
</para>

<para>
If the target module tries to call a function which one of the payload modules is interested in (<link linkend="target_function"><firstterm>target function</firstterm></link>), that payload module takes control before and after it while executing the corresponding <link linkend="pre_handler"><firstterm>pre handler(s)</firstterm></link> and/or <link linkend="post_handler"><firstterm>post handler(s)</firstterm></link>. This way, the payload
module can get access to the arguments and the return value of the target function. In addition,
the payload module can register a <link linkend="replacement_function"><firstterm>replacement function</firstterm></link> that will be called instead of that target function. This allows to change the behaviour of the target module, for 
example, to make it look like the target function has failed.
</para>

<para>
Payload modules can do various things:
</para>

<itemizedlist>
<listitem><para>
Collect data about which function was called when, with what arguments, and
what it returned (<firstterm><quote>Call Monitor</quote></firstterm> 
on the figure). The data are output to a trace 
(via <firstterm><quote>Data Collector</quote></firstterm> facilities) 
and can then be analyzed by user-space applications.
</para></listitem>

<listitem>
    <para>
Simulate the situations when the kernel seems to fail to satisfy some of 
the requests made by the target module 
(<firstterm><quote>Fault Similator</quote></firstterm> on the 
figure). That is, simulate low memory conditions, etc. Fault simulation is 
performed according to the <firstterm>scenarios</firstterm> selected by the 
user. It can be used to check if the module is still reliable in error 
conditions, if possible failures of the called functions are properly 
handled by the module, etc. 
    </para>
</listitem>

<listitem><para>
Check various requirements for the operation of the module 
(<firstterm><quote>Base Checker</quote></firstterm> on the figure): whether it 
uses virtual memory facilities in a right way, etc. 
</para></listitem>

<listitem><para>
...And much more (see <xref linkend="custom_analysis"/>).
</para></listitem>

</itemizedlist>

<para>
When loaded, payload modules register themselves with the KEDR core - see 
<xref linkend="payload_api"/>.
</para>

<para>
The user controls the analysis process via convenience API and tools 
(<firstterm><quote>Kernel Module Analysis API + Tools</quote></firstterm> 
on the figure) - either manually or via a user-space application. 
</para>

<note><para>
Note that the term <quote>API</quote> is used here in a rather broad sense. Currently, it is not a set of functions or classes provided for the applications written in some programming language. It rather consists of all the means that KEDR provides for the user-space applications to start the analysis process, to control it and to retrieve the results. These means include the parameters of the kernel modules from KEDR, the special files that allow to configure fault simulation scenarios, etc. All these facilities are described in the respective sections of this manual.
</para></note>

<para>
<link linkend="kedr_control">KEDR control tool</link> makes sure each 
component of KEDR is loaded in proper order and with proper parameters. It does roughly the following 
(the more precise description is available in <xref 
linkend="kedr_control"/>):
</para>

<orderedlist>
<listitem><para>
Loads the <filename>KEDR core</filename> responsible to keep track of payload modules and to provide API to them. The name of the target module passed to <filename>KEDR core</filename> a parameter (<quote>target_name</quote>).
</para></listitem>

<listitem><para>
Loads the payload modules listed in the configuration file. Each payload 
module should register itself with the KEDR core by calling <function>kedr_payload_register</function> (see <xref 
linkend="payload_api"/>), this is usually done in its init function. From 
this moment, KEDR begins watching for the specified target module 
to load (see also <xref linkend="kedr_manual_getting_started"/>).
</para></listitem>
</orderedlist>

<para>
When the analysis is done, the <link linkend="kedr_control">KEDR control tool</link> unloads the modules mentioned above, in appropriate order.
</para>

<note><para>
Note that the KEDR core makes no assumptions about what 
exactly the currently registered payload modules do. This allows to 
implement different types of analysis with the help of KEDR.
</para></note>

</section>
