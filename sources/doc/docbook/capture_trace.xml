<section id="capture_trace">
<title>Capturing the Trace</title>

<section id="capture_trace.general">
<title>General</title>
<para>
    <command>kedr_capture_trace</command> - tool to capture the data sent by payload modules to the trace.
</para>
</section>

<section id="capture_trace.syntax">
<title>Usage</title>

<cmdsynopsis>
    <command>kedr_capture_trace</command>
    <arg><replaceable>OPTIONS</replaceable></arg>
</cmdsynopsis>
</section>

<section id="capture_trace.description">
<title>Description</title>
    <para>
<command>kedr_capture_trace</command> capture the trace information of payload modules until program is terminated with a SIGINT or, when used with '-s' option, until all trace information from target module session was recieved.
    </para>
    <para>
Every trace line is stored it in the file(s) (option '-f') and/or passed to user-specified program(s) via STDIN(option '-p'). If neither '-f' nor '-p' option is specified, every trace line is output via STDOUT.
    </para>
</section>

<section id="kedr_capture_trace.options">
<title>Options</title>

<variablelist>
    <varlistentry>
        <term>-d <replaceable>debugfs_mount_point</replaceable></term>
        <listitem>
            <para>
Specify directory where debugfs filesystem is currently mounted. This filesystem contains the trace file from which the trace will be captured. If this argument is not supplied, it is assumed that the mount point of debugfs filesystem is <filename class="directory">/sys/kernel/debug</filename>.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-f, --file <replaceable>file</replaceable></term>
        <listitem>
            <para>
Store every trace line into the given file. If the file doesn't exist, create it at the start, otherwise append new data to the old file's content.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-p, --program <replaceable>program</replaceable></term>
        <listitem>
            <para>
When start, launch <replaceable>program</replaceable>. Then pipe every trace line to this program via its STDIN. When stop capturing trace, close own side of pipe and wait until program terminates.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-s, --session</term>
        <listitem>
            <para>
Read only those lines from the trace, which collected from the moment target module is loaded and until the moment target module is unloaded. After process the last line from the target session, stop capturing.
            </para>
            <para>
NOTE: It is error to use this option when some trace lines from the current target has already processed.
            </para>
        </listitem>
    </varlistentry>
</variablelist>
</section>

<section id="capture_trace.examples">
<title>Examples</title>
    <para>
<programlisting>
kedr_capture_trace -f trace.txt
^C
</programlisting>
store in the file <filename>trace.txt</filename> all records from the trace, until 'Ctrl+C' is pressed.
    </para>
    <para>
<programlisting>
kedr_capture_trace -p "grep called_kfree > frees.txt"
^C
</programlisting>
store in the file <filename>frees.txt</filename> all records from the trace, generated by kfree() call, until 'Ctrl+C' is pressed.
    </para>
    <para>
<programlisting>
kedr_capture_trace \
-p "grep called_kfree > frees.txt" \
-p "grep called___kmalloc > allocs.txt" \
-f trace.txt
^C
</programlisting>
store all records from the trace, records generated by kfree() call, and records generated by __kmalloc() call in the files frees.txt, allocs.txt and trace.txt correspondingly.
    </para>
    <para>
<programlisting><![CDATA[
kedr start moduleA
kedr_capture_trace -s -f trace.txt &
pid=$!
/sbin/modprobe moduleA
...
/sbin/modprobe -r moduleA
wait $pid
kedr stop
]]></programlisting>
store in the file <filename>trace.txt</filename> all records from the trace, generated by moduleA.
    </para>
    <para>
See also <xref linkend="getting_started.call_monitoring"/>.
    </para>
</section>
</section>