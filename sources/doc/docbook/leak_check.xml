<section id="leak_check">
<title>Detecting Memory Leaks</title>

<para>
<firstterm>LeakCheck</firstterm> allows, as its name implies, to check the target kernel module for resource leaks, for example, to reveal memory blocks that were allocated but were not freed by that module. 
</para>

<para>
LeakCheck is enabled in KEDR by default. If you would like to disable it, set CMake variable <code>KEDR_LEAK_CHECK</code> to <code>OFF</code> when executing CMake before building KEDR:
</para>

<programlisting><![CDATA[
cmake -DKEDR_LEAK_CHECK=OFF <other_options> <path_to_kedr_sources>
]]></programlisting>

<note>
<para>
Starting from KEDR 0.3, LeakCheck can be used simultaneously with other kinds of payload modules provided by KEDR. In particular, you can use LeakCheck and fault simulation for memory-related functions at the same time. 
</para>
</note>

<para>LeakCheck is now organized as follows.</para>

<itemizedlist>
	<listitem><para>
The LeakCheck core (<filename>kedr_leak_check.ko</filename> module) analyzes the information about allocations and deallocations and provides API for other components. 
	</para></listitem>
	<listitem><para>
One or more components obtain such information and pass it to the LeakCheck core via the API. Some of these components may be payload modules for KEDR, they may collect information about the calls to allocation/deallocation routines. Some may be the kernel-mode components of other kinds, e.g., the tools to track the callback operations of the target module, etc. Even the target module itself can use LeakCheck API to inform the analyzer about some allocation/deallocation events which could be otherwise more difficult to detect (some kind of annotations could be used here).
	</para></listitem>
</itemizedlist>

<!-- ============================================================== -->

<section id="leak_check.usage">
<title>Typical Usage</title>

<para>
LeakCheck can be used like any other payload module for KEDR. First you need to load KEDR core and the appropriate plugins:
</para>

<programlisting><![CDATA[
kedr start <target_name>
]]></programlisting>

<para>
or, equivalently,
</para>

<programlisting><![CDATA[
kedr start <target_name> -f leak_check.conf
]]></programlisting>


<para>
Load the target module and do something with it as usual, then unload the 
target. Do not stop KEDR yet.
</para>

<para>
Take a look at <filename class="directory">/sys/kernel/debug/kedr_leak_check/&lt;target_name&gt;</filename> directory. Here we 
assume that debugfs is mounted to <filename class="directory">/sys/kernel/debug</filename>. If it is not, you 
should mount it: 
</para>

<programlisting><![CDATA[
mount debugfs -t debugfs /sys/kernel/debug
]]></programlisting>

	<para>
There should be the following files in <filename class="directory">kedr_leak_check/&lt;target_name&gt;</filename> directory:
	</para>
<itemizedlist>
	<listitem>
	<para>
<filename>info</filename>:
  </para>
	<itemizedlist>
		<listitem><para>information about the target module (its name, addresses of the <quote>init</quote> and <quote>core</quote> memory areas); </para></listitem>
		<listitem><para>total number of memory allocations performed by the module;</para></listitem>
		<listitem><para>number of possible memory leaks (allocations without matching frees);</para></listitem>
		<listitem><para>number of free-like calls without matching allocation calls;</para></listitem>
	</itemizedlist></listitem>
	<listitem>
	<para>
<filename>possible_leaks</filename>:
	</para>
	<itemizedlist>
		<listitem><para>information about each detected memory leak: address and size of the memory block and a portion of the call stack of allocation (the allocations with the same call stack are grouped together, only the most recent one is shown);</para></listitem>
	</itemizedlist></listitem>
	<listitem>
	<para>
<filename>unallocated_frees</filename>:
	</para>
	<itemizedlist>
		<listitem><para>information about each free-like call without  matching allocation call: address of the memory block and a portion of the call stack of that deallocation call (the deallocations with the same call stack are grouped together)</para></listitem>
	</itemizedlist></listitem>
	<listitem>
	<para>
<filename>flush</filename>:
	</para>
	<itemizedlist>
		<listitem><para>if the user writes anything to this file, the current information about memory allocations without deallocations and vise versa will be available immediately in the files listed above (as well as in the system log if that is enabled for LeakCheck); note that some of the memory blocks reported there may actually be freed later by the target module and therefore are not leaks</para></listitem>
	</itemizedlist></listitem>
	<listitem>
	<para>
<filename>clear</filename>:
	</para>
	<itemizedlist>
		<listitem><para>if the user writes anything to this file, LeakCheck will <quot>forget</quot> the information about memory allocations and deallocations collected so far</para></listitem>
	</itemizedlist></listitem>
</itemizedlist>

<para>
<filename class="directory">unallocated_frees</filename> file should normally be empty. If it is not empty 
in some of your analysis sessions, it could be a problem in LeakCheck itself (e.g., the target module used some allocation 
function that LeakCheck was unaware of) or memory is probably allocated by some other module. If you suppose it is a problem in LeakCheck, please report it to <ulink url="http://code.google.com/p/kedr/issues/">the issue tracker</ulink>.
</para>

</section>
<!-- ============================================================== -->

<section id="leak_check.reports">
<title>Reports</title>

<para>
Here are the examples of <filename>info</filename> and <filename>possible_leaks</filename> files from a real analysis session.
The target is <filename>vboxsf</filename> module from VirtualBox Guest Additions 4.0.3. The <ulink url="http://www.virtualbox.org/ticket/8185">memory leak caught there</ulink> was fixed in VirtualBox 4.0.4.
</para>

<para><filename>info</filename>:</para>
<programlisting><![CDATA[
Target module: "vboxsf", 
  init area at 0xfe2b6000, core area at 0xfe2aa000
Memory allocations: 49
Possible leaks: 11
Unallocated frees: 0
]]></programlisting>

<para><filename>possible_leaks</filename>:</para>
<programlisting><![CDATA[
Block at 0xf617e000, size: 4096; stack trace of the allocation:
[<fe2ab904>] sf_follow_link+0x34/0xa0 [vboxsf]
[<c0303caf>] link_path_walk+0x79f/0x910
[<c0303f19>] path_walk+0x49/0xb0
[<c0304089>] do_path_lookup+0x59/0x90
[<c03042bd>] user_path_at+0x3d/0x80
[<c02fd6d7>] vfs_fstatat+0x37/0x70
[<c02fd748>] vfs_stat+0x18/0x20
[<c02fd9af>] sys_stat64+0xf/0x30
[<c0203190>] sysenter_do_call+0x12/0x22
[<ffffe430>] 0xffffe430
[<ffffffff>] 0xffffffff
+8 more allocation(s) with the same call stack.
----------------------------------------
Block at 0xf659a000, size: 4096; stack trace of the allocation:
[<fe2ab904>] sf_follow_link+0x34/0xa0 [vboxsf]
[<c0303caf>] link_path_walk+0x79f/0x910
[<c0303f19>] path_walk+0x49/0xb0
[<c0304089>] do_path_lookup+0x59/0x90
[<c03042bd>] user_path_at+0x3d/0x80
[<c02f8825>] sys_chdir+0x25/0x90
[<c0203190>] sysenter_do_call+0x12/0x22
[<ffffe430>] 0xffffe430
[<ffffffff>] 0xffffffff
+1 more allocation(s) with the same call stack.
----------------------------------------
]]></programlisting>

<para>
The format of stack traces is the same as it is used to output data about 
warnings and errors to the system log:
</para>

<programlisting><![CDATA[
[<call_address>] <function_name>+<offset_in_func>/<size_of_func> [<module>]
]]></programlisting>

<para>
To be exact, each address corresponds to the instruction following the relevant call.
</para>

</section>
<!-- ============================================================== -->

<section id="leak_check.analysis">
<title>Analyzing the Results</title>

<para>
Addr2line, GDB, Objdump or some other tools of this kind can be used to locate the 
places in the source code corresponding to the entries in the stack traces. 
The detailed description can be found, for example, in <xref linkend="analyze_trace"/>.
</para>

<para>
In the current version of LeakCheck, the names of the functions from 
<quote>init</quote> area (those marked with <code>__init</code> in 
the source file of the target module) cannot be resolved and the relevant 
stack trace entries contain only raw call addresses. This is because name 
resolution is done when "init" area has already been dropped from memory. 
</para>

<para>
Using the the start address of the <quote>init</quote> area that <filename>info</filename> file shows and 
the technique described in <xref linkend="analyze_trace"/> referred to above, you can 
overcome this.
</para>

</section>
<!-- ============================================================== -->

<section id="leak_check.param">
<title>Parameters</title>

<para>
The parameters of the core LeakCheck module are described below. 
</para>

<para>
If you would like to change the values of these parameters, copy the default <link linkend="kedr_control.config_file">configuration file</link>
for LeakCheck to a directory of your choice and add <code>&lt;parameter_name&gt;=&lt;value&gt;</code> to the line for <filename>kedr_leak_check.ko</filename> module there. Then you can specify the path to the resulting configuration file when starting KEDR.
</para>

<section id="leak_check.param.stack_depth">
<title>Stack Depth</title>

<para>
The maximum number of stack frames shown in the reports is controlled by <code>stack_depth</code> 
parameter.</para> 

<para>
<code>stack_depth</code> parameter is an unsigned integer, not greater than 16. 
Default value: 16. 
</para>

</section>
<!-- ============================================================== -->

<section id="leak_check.param.syslog_output">
<title>Output to the System Log</title>

<para>
By default, LeakCheck outputs the results not only to its files in debugfs but also to the system log. If output to the system log is not desirable, you can disable it by setting <code>syslog_output</code> parameter to 0. 
</para> 

<para>
<code>syslog_output</code> parameter is an unsigned integer. Non-zero means <quote>on</quote>, zero means <quote>off</quote>.
Default value: 1. 
</para>

</section>
<!-- ============================================================== -->

<section id="leak_check.param.stack_depth">
<title>Groups of Bad Frees</title>

<para>
In some cases, LeakCheck may produce many warnings about <quote>unallocated frees</quote>. This may happen, for example, when the resources were actually allocated but LeakCheck did not detect that.
</para>

<para><code>bad_free_groups_stored</code> parameter the maximum number of records (to be exact, groups of the records with the same call stack) for <quote>unallocated frees</quote> that can be shown in the detailed report. The greater the value of this parameter the more memory is needed to store the report, etc. Note that the summary always presents the complete number of the <quote>unallocated frees</quote> LeakCheck has detected and is not affected by this parameter.
</para> 

<para>
<code>bad_free_groups_stored</code> parameter is an unsigned integer. 
Default value: 8. 
</para>

</section>
<!-- ============================================================== -->

</section> <!-- leak_check.param -->
<!-- ============================================================== -->

<section id="leak_check.api">
<title>API</title>

<section id="leak_check.api.common">
<title>Common notes</title>
<orderedlist>
	<listitem><para>
Assuming the <filename class="directory">include</filename> directory of KEDR is in the search path for header files, the kernel module using the LeakCheck API should use the following <code>#include</code> directive:
	</para>
	
<programlisting><![CDATA[
#include <kedr/leak_check/leak_check.h>
]]></programlisting>
	</listitem>
	
	<listitem><para>
As the module uses functions exported by another module (LeakCheck core), it also needs the <filename>.symvers</filename> file of the latter, namely
	</para>
<programlisting><![CDATA[
<KEDR install prefix>/lib/modules/`uname -r`/symvers/kedr_leak_check.symvers
]]></programlisting>
	</listitem>
	
	<listitem><para>
In the functions below, <code>caller_address</code> is the return address of the call to the corresponding allocation or deallocation function. That is the address of the machine instruction immediately following the call (x86-specific). The pre- and post-handlers in the payload modules for KEDR have caller_address variable for this purpose, so you can just use it there. If LeakCheck API is used in some other component rather than a KEDR payload module, it is the job of that component to properly determine the value to be passed as caller_address (see also <quote>Annotations</quote> example).
	</para></listitem>
	
	<listitem><para>
Currently, LeakCheck can analyze only one kernel module at a time. So, all the loaded components that use LeakCheck API should give LeakCheck the information only about that particular module.
	</para></listitem>
</orderedlist>
</section>
<!-- ============================================================== -->

<section id="leak_check.api.handle_alloc">
<title>kedr_lc_handle_alloc()</title>
<programlisting><![CDATA[
void
kedr_lc_handle_alloc(struct module *mod, const void *addr, size_t size, 
        const void *caller_address);
]]></programlisting>

<para>
Call this function to inform LeakCheck core that the given kernel module, <code>mod</code>, has allocated a resource (e.g. memory block, some object, etc.) at the address <code>addr</code> in memory. <code>addr</code> must be neither <code>NULL</code> nor <code>ZERO_SIZE_PTR</code>.
</para>

<para>
The size of the resource is passed as <code>size</code> argument. If the resource is a memory block, <code>size</code> should be the size of this block. For other types of resources, it is also recommended to provide a meaningful value of size argument. In some cases, the size of the structure corresponding to the resource could be convenient to use here.
</para>

<para>
If the size cannot be obtained, pass 0 as size. This will be interpreted as <quote>unknown size</quote> by LeakCheck.
</para>

<para>
<code>size</code> must not be equal to <code>(size_t)(-1)</code>, this value is reserved.
</para>

<para>
This function should be called <emphasis>after</emphasis> the resource has actually been successfully allocated.
</para>
</section>
<!-- ============================================================== -->

<section id="leak_check.api.handle_free">
<title>kedr_lc_handle_free()</title>

<programlisting><![CDATA[
void
kedr_lc_handle_free(struct module *mod, const void *addr, 
        const void *caller_address);
]]></programlisting>

<para>
Call this function to inform LeakCheck core that the given kernel module, <code>mod</code>, has freed (released, deallocated, ...) the resource that was located at the given address in memory (<code>addr</code>). <code>addr</code> must be neither <code>NULL</code> nor <code>ZERO_SIZE_PTR</code>.
</para>

<para>
This function should be called <emphasis>before</emphasis> the resource is actually freed. This is because LeakCheck assumes that the calls to its API happen in exactly the same order as the corresponding allocation and deallocation calls in the code under analysis.
</para>

<para>
If <code>kedr_lc_handle_free()</code> was called after the deallocation, some other part of the code under analysis could get in between the actual deallocation and that call and allocate the resource. The chances are, the new resource will have the same address as the old one. As a result, a call to <code>kedr_lc_handle_alloc()</code> could also occur before the call to <code>kedr_lc_handle_free()</code> with the same addr value, which could make a mess.
</para>

</section>
<!-- ============================================================== -->

</section> <!-- leak_check.api -->
<!-- ============================================================== -->

<section id="leak_check.examples">
<title>Examples</title>

<para>
The following examples are provided to demonstrate how to use LeakCheck to build custom analysis tools. The examples are located in the following directory: <filename class="directory">&lt;KEDR install prefix&gt;/share/kedr/examples/leak_check/</filename>.
</para>

<section id="leak_check.examples.mempool">
<title>Mempool Operations</title>

<para>
<quote>Mempool_ops</quote> example demonstrates how to create plugins to LeakCheck using the template-based generation system provided by KEDR and how to track custom allocation and deallocation operations.
</para>

<para>
The module built in this example tracks calls to <code>mempool_alloc()</code> and <code>mempool_free()</code> and uses LeakCheck to analyze consistency of these calls.
</para>

<para>
See <ulink url="http://kedr.googlecode.com/hg/sources/examples/leak_check/mempool_ops/Readme.txt">Readme.txt</ulink> for the example for details.
</para>

<para>
If you would like to use LeakCheck to process allocation/deallocation events from the functions it currently does not track, the recommended way is to prepare a custom module like it is done in this example rather than to change the modules provided by KEDR framework.
</para>

</section>
<!-- ============================================================== -->

<section id="leak_check.examples.annotations">
<title>Annotations</title>

<para>
<quote>Annotations</quote> example demonstrates how to use LeakCheck API in a module that is not a plugin to KEDR by itself. One common use case is annotating custom resource allocation/deallocation operations in a module you develop or, at least, can change a bit and rebuild.
</para>

<para>
The module is almost the same in this example as in "sample_target" example. The difference is, <code>device_create()</code> and <code>device_destroy()</code> are annotated here with the special calls for LeakCheck to track these operations.
</para>

<para>
See <ulink url="http://kedr.googlecode.com/hg/sources/examples/leak_check/annotations/Readme.txt">Readme.txt</ulink> for the example as well as the comments in its source code for details.
</para>

</section>
<!-- ============================================================== -->

</section> <!-- leak_check.examples -->
<!-- ============================================================== -->

<section id="leak_check.caveats">
<title>Notes</title>

<para>
When the target module is loaded, the output files are cleared, the results 
are reset. Please take this into account when loading and unloading the 
target module more than once while LeakCheck is loaded.
</para>

<para>
As usual with debugfs, the output files live only as long as 
LeakCheck is loaded. In particular, after unloading the 
target, please collect the results first and only after that reload the 
target or stop KEDR.
</para>

<para>
For the present, the tool monitors the usage of several dozens of kernel functions that allocate and deallocate memory. However, if the target module uses some other functions for this purpose,  LeakCheck will not notice that. It is possible to add support for more functions to LeakCheck or provide some other workaround based on <link linkend='leak_check.api'>LeakCheck API</link>.
</para>

<para>
Besides that, if the target module allocates a memory block but it is another module (or the kernel proper) that frees it, this will also be reported as a memory leak by LeakCheck. That being said, possible leaks reported by LeakCheck should be further analyzed to find out whether they are actually leaks.
</para>

</section>
<!-- ============================================================== -->

</section>
