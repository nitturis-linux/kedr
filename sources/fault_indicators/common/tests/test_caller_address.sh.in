#!/bin/sh

fault_simulation_module="@CMAKE_BINARY_DIR@/fault_simulation/kedr_fault_simulation.ko"
kedr_trace_module="@CMAKE_BINARY_DIR@/trace/kedr_trace.ko"

indicator_module="@CMAKE_CURRENT_BINARY_DIR@/../kedr_fsim_indicator_common.ko"
indicator_name="common"

payload_module="@CMAKE_BINARY_DIR@/payloads_fsim/common_memory_management/kedr_fsim_cmm.ko"
point_name="__kmalloc"

target_name="target_caller_address"
target_module="@CMAKE_CURRENT_BINARY_DIR@/target_caller_address/target_caller_address.ko"


tmpdir="@KEDR_TEST_PREFIX_TEMP_SESSION@/kedr_caller_address"
debugfs="${tmpdir}/debugfs"

point_dir="${debugfs}/kedr_fault_simulation/points/${point_name}"

trace_file="${tmpdir}/trace.txt"

kedr_control_script="sh @CMAKE_BINARY_DIR@/tools/control/kedr_test"
capture_trace_script="@CMAKE_BINARY_DIR@/tools/capture_trace/kedr_capture_trace"

simulate()
{
	echo 123 > "${debugfs}/target_caller_address/control";
}


kedr_config_file="${tmpdir}/kedr_test_caller_address.conf"


mkdir -p "${tmpdir}"
cat > "$kedr_config_file" << eof

module "${kedr_trace_module}"
module "${fault_simulation_module}"
payload "${payload_module}"
module "${indicator_module}"

on_load mkdir -p "${debugfs}"
on_load mount -t debugfs debugfs "${debugfs}"
on_unload umount "${debugfs}"

on_load echo "${indicator_name}" > "${point_dir}/current_indicator"

eof

if ! $kedr_control_script start "${target_name}" -f "$kedr_config_file"; then
	printf "Cannot load KEDR for testing.\n"
	exit 1
fi

if ! /sbin/insmod "${target_module}"; then
	printf "Cannot load target module for testing.\n"
	$kedr_control_script stop
	exit 1
fi

echo 1 > "$point_dir/expression"

if simulate; then
	printf "It was expected that simulate would fail (expression is '%s') but it succeeded.\n" `cat "$point_dir/expression"`
	/sbin/rmmod "${target_module}"
	$kedr_control_script stop
	exit 1
fi

${capture_trace_script} -d "${debugfs}" -f "${trace_file}" &
capture_pid=$!

sleep 0.5
kill -2 $capture_pid

if ! grep "__kmalloc" ${trace_file} > /dev/null; then
	printf "The trace contains no records for __kmalloc() calls.\n"

	/sbin/rmmod "${target_module}"
	$kedr_control_script stop
	exit 1
fi
##

caller_address=`sed -n '/called___kmalloc/ ! d; s/^.\{1,\}(\[<//; s/>\].\{1,\}$//; p; q' ${trace_file}`


if ! echo "$caller_address" | grep '^[[:xdigit:]]\{1,\}$' > /dev/null; then
	printf "Failed to extract caller address from the trace (got value \"%s\").\n" "$caller_address"

	/sbin/rmmod "${target_module}"
	$kedr_control_script stop
	exit 2
fi

expression="caller_address != 0x${caller_address}"
if ! echo "$expression" > "$point_dir/expression"; then
	printf "Cannot set expression \"%s\" for fault simulation indicator.\n" "$expression"
	/sbin/rmmod "${target_module}"
	$kedr_control_script stop

	exit 1
fi

if ! simulate; then
	printf "Fault simulation was not expected to be triggered for __kmalloc with expression \"%s\".\n" "$expression"

	/sbin/rmmod "${target_module}"
	$kedr_control_script stop

	exit 1
fi


if ! /sbin/rmmod "${target_module}"; then
	printf "Error occured while unloading the target module.\n"
	$kedr_control_script stop
	exit 1
fi
if ! $kedr_control_script stop; then
	printf "Error occured while unloading KEDR.\n"
	exit 1
fi
