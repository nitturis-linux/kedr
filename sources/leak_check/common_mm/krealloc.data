[group]
	# The body of the replacement function
	handler.pre =>>
	if (size == 0 || !ZERO_OR_NULL_PTR(p)) {
		/* kfree */
		if (!ZERO_OR_NULL_PTR(p)) 
			kedr_lc_handle_free(target_module, p, caller_address);
/* [NB] If size != 0 and p != NULL and later the allocation fails, we will
 * need to add a fake allocation event for 'p' to the storage because 'p'
 * is not actually freed by krealloc() in this case. */
	}
	<<
	handler.post =>>
	if (size != 0) {
		if (p == NULL) { 
			/* kmalloc */
			if (ret_val != NULL)
				kedr_lc_handle_alloc(target_module, ret_val,
					size, caller_address);
		} else {
			/* kfree + kmalloc if everything succeeds */
			kedr_lc_handle_alloc(target_module, 
				((ret_val != NULL) ? ret_val : p), 
				size, caller_address);
		/* If the allocation failed, we return information about 'p'
		 * to the storage. A minor issue is that stack trace will 
		 * now point to this call to krealloc rather than to the call 
		 * when 'p' was allocated. Should not be much of a problem. */
		}
	}
	<<
#######################################################################
