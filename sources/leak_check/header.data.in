module.name = @kmodule_name@
module.author = Eugene A. Shatokhin

header =>>
/* This payload module checks the target for memory leaks.
 * kedr_leak_check does not use trace events or the like, it performs
 * analysis itself and simply outputs the results to the files in 
 * debugfs - see the contents of 'kedr_leak_check' directory there.
 *
 * For each possible memory leak (and for each free-like call without 
 * matching allocation call) the system stores the address of the memory
 * block and a portion of the call stack for the allocation / deallocation
 * call.
 *
 * Module parameters:
 *  stack_depth - (unsigned integer, not greater than 16) - maximum number
 *  of stack frames to store and output. Default: 12.
 *
 * Notes:
 * kedr_leak_check can be more convenient to look for memory leaks than 
 * plain call monitoring with analysis of the trace. The trace may become
 * huge if the target module actively allocates and frees memory.
 *********************************************************************/
 
/* ========================================================================
 * Copyright (C) 2010-2011, Institute for System Programming 
 *                          of the Russian Academy of Sciences (ISPRAS)
 * Authors: 
 *      Eugene A. Shatokhin <spectre@ispras.ru>
 *      Andrey V. Tsyvarev  <tsyvarev@ispras.ru>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 ======================================================================== */

#include <linux/slab.h>
#include <linux/gfp.h>
#include <linux/mm.h>
#include <linux/topology.h>  /* NUMA-related stuff */
#include <linux/uaccess.h>   /* user space access functions */
#include <linux/string.h>    /* *dup_user() */
#include <linux/err.h>       /* ERR_PTR, etc. */
#include <linux/vmalloc.h>   /* vmalloc() family */
<<
