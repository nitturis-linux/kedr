#!/bin/sh

fault_simulation_module="@CMAKE_CURRENT_BINARY_DIR@/../kedr_fault_simulation.ko"
#fsim_base_module="@CMAKE_CURRENT_BINARY_DIR@/../kedr_fsim_base.ko"

read_point_name="kedr-read-point"
write_point_name="kedr-write-point"
read_indicator_name="indicator_for_read"
write_indicator_name="indicator_for_write"

module_a_name="fsim_test_module_a"
module_a="@CMAKE_CURRENT_BINARY_DIR@/module_a/${module_a_name}.ko"
module_b="@CMAKE_CURRENT_BINARY_DIR@/module_b/fsim_test_module_b.ko"
current_value_file="/sys/module/${module_a_name}/parameters/current_value"

device=kedr_test_device
debugfs_mount_point="@KEDR_TEST_DIR@/debugfs"
control_root="$debugfs_mount_point/kedr_fault_simulation"

# set_indicator point_name indicator_name
set_indicator()
{
    printf "$2" > "$control_root/points/$1/current_indicator"
}
# clear_indicator point_name
clear_indicator()
{
    printf "%s" "" > "$control_root/points/$1/current_indicator"
}
# get_indicator point_name
# print indicator to output
get_indicator()
{
    cat "$control_root/points/$1/current_indicator"
}


# simulate_point (read_point_name) | (write_point_name size)
simulate_point()
{
if test "$1" == "$read_point_name"; then
    dd "if=/dev/$device" of=/dev/null bs=1 count=1
elif test "$1" == "$write_point_name"; then
    dd "of=/dev/$device" if=/dev/zero bs=$2 count=1
fi
local result=$?
current_value=`cat "$current_value_file"`
return $result
}

commands_file="@CMAKE_CURRENT_BINARY_DIR@/commands"
#Commands for load and unload module 'a;
commands_file_module_a="@CMAKE_CURRENT_BINARY_DIR@/commands_a"
do_commands_script="sh @CMAKE_BINARY_DIR@/tests/scripts/do_commands.sh"

cat > "$commands_file" << eof

on_load insmod "$fault_simulation_module" || ! printf "Cannot load fault simulation module into kernel.\n"
on_unload rmmod "$fault_simulation_module" || ! printf "Cannot unload fault simulation module.\n"
on_load mkdir -p "$debugfs_mount_point" || ! printf "Cannot create mount point for debugfs.\n"
on_load mount -t debugfs debugfs "$debugfs_mount_point" || ! printf "Cannot mount debugfs.\n"
on_unload umount "$debugfs_mount_point" || ! printf "Error occured while umounting debugfs.\n"
eof

cat > "$commands_file_module_a" << eof

on_load insmod "$module_a" || ! printf "Cannot load module 'a' into the kernel.\n"
on_unload rmmod "$module_a" || ! printf "Fail to unload module 'a'.\n"

eof

if ! $do_commands_script "$commands_file" load; then
    printf "Cannot initialize test.\n"
    exit 1
fi

if ! $do_commands_script "$commands_file_module_a" load; then
    printf "Cannot load module 'a' correctly.\n"
    exit 1
fi


if ! insmod "$module_b"; then
    printf "Cannot load module 'b' into the kernel.\n"
    $do_commands_script "$commands_file_module_a" unload && $do_commands_script "$commands_file" unload
    exit 1
fi

# Try to set write indicator for read point

if set_indicator "$read_point_name" "$write_indicator_name"; then
    printf "Indicator was set for a point which data it cannot process.\n"
    rmmod "$module_b"
	$do_commands_script "$commands_file_module_a" unload    
	$do_commands_script "$commands_file" unload
	
    exit 1
fi

if ! set_indicator "$read_point_name" "$read_indicator_name"; then
    printf "Cannot set indicator for the point.\n"
    rmmod "$module_b"
	
	$do_commands_script "$commands_file" unload
	
    exit 1
fi

# Try to unload module with point while we hold control file of this point opened
{
    #Module 'a' should correctly unload even with file opened
    if ! $do_commands_script "$commands_file_module_a" unload; then
        printf "Cannot remove module 'a' with indicator control file opened.\n"
        rmmod "$module_b"
		$do_commands_script "$commands_file" unload
        exit 1
    fi

	#Operations with file may fail, but shouldn't crash kernel
    cat <&9 > /dev/null
	echo "$write_indicator_name"  >&8 

	if ! $do_commands_script "$commands_file_module_a" load; then
		printf "Failed to load module 'a' again.\n"
        rmmod "$module_b"
		$do_commands_script "$commands_file" unload
		exit 1
	fi

} 9<"$control_root/points/${read_point_name}/current_indicator" 8>"$control_root/points/${read_point_name}/current_indicator"

rmmod "$module_b" && \
    $do_commands_script "$commands_file_module_a" unload && \
    $do_commands_script "$commands_file" unload
