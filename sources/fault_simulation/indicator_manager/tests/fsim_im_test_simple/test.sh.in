#! /bin/sh

program="@CMAKE_CURRENT_BINARY_DIR@/program/fsim_im_test_program"

module_name="fsim_im_interaction_test_module"
module="@CMAKE_CURRENT_BINARY_DIR@/module/${module_name}.ko"

device=kedr_test_device
char_device_script="sh @CMAKE_BINARY_DIR@/tests/scripts/char_device.sh"

fsim_base_module="@CMAKE_BINARY_DIR@/fault_simulation/base/kedr_fsim_base.ko"

#need for indicator manager
kedr_base_module="@CMAKE_BINARY_DIR@/base/kedr_base.ko"
sc_module="@CMAKE_BINARY_DIR@/syscall_connector/kernel_part/kedr_syscall_connector.ko"

fsim_im_module="@CMAKE_BINARY_DIR@/fault_simulation/indicator_manager/kernel_part/kedr_fsim_indicator_manager.ko"

do_commands_script="sh @CMAKE_BINARY_DIR@/tests/scripts/do_commands.sh"

result_file="/sys/module/$module_name/parameters/result"

commands_file="@CMAKE_CURRENT_BINARY_DIR@/commands"
cat > "$commands_file" << eof

on_load insmod "$fsim_base_module" || ! printf "Cannot load fault simulation base module into kernel.\n"
on_unload rmmod "$fsim_base_module" || ! printf "Cannot unload fault simulation base module.\n"

on_load insmod "$kedr_base_module" || ! printf "Cannot load kedr base module into kernel.\n"
on_unload rmmod "$kedr_base_module" || ! printf "Cannot unload kedr base module."

on_load insmod "$sc_module" || ! printf "Cannot load syscall connector module into kernel.\n"
on_unload rmmod "$sc_module" || ! printf "Cannot unload syscall connector module.\n"

on_load insmod "$fsim_im_module" || ! printf "Cannot load indicator manager module into kernel.\n"
on_unload rmmod "$fsim_im_module" || ! printf "Cannot unload indicator manager module.\n"

# Load module and create device
on_load insmod "$module" || ! printf "Cannot load module for test into kernel.\n"
on_unload rmmod "$module" || ! printf "Cannot unload module for test.\n"

on_load $char_device_script "$device" create || ! printf "Cannot create file for use device.\n"
on_unload $char_device_script "$device" delete || ! printf "Cannot delete file for use device.\n"

#Run test program
on_load $program || ! printf "Test program cannot be run or it return error.\n"

eof



if ! $do_commands_script "$commands_file" load; then
    printf "Cannot initialize test.\n"
    rm -rf "$command_file"
    exit 1
fi

dd if=/dev/${device} of=/dev/null bs=2 count=1

result=`cat "$result_file"`



if ! $do_commands_script "$commands_file" unload; then
    printf "Error occures while finalize test.\n"
    rm -rf "$command_file"
    exit 1
fi

rm -rf "$command_file"

if test "$result" != "Ok"; then
    printf "Error occures while test: '%s'\n" "$result"
    
    exit 1
fi

