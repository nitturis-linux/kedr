#!/bin/sh
#
# Usage:
#     test.sh function payload
# where
#	'function' - kernel function, call interception of which should be tested,
#	'payload' - call monitor payload, which replace this function

kedr_control_scipt="sh @CMAKE_BINARY_DIR@/tools/control/kedr_test"
capture_trace_script="sh @CMAKE_BINARY_DIR@/tools/capture_trace/capture_trace"
kedr_debugfs_dir=@kedr_debugfs_dir@
temp_dir=/tmp/kedr/call_interception

device=kedr_trigger_device

trigger_module_name=trigger_module
trigger_module=@CMAKE_CURRENT_BINARY_DIR@/trigger_module/trigger_module.ko
trigger_program=@CMAKE_CURRENT_BINARY_DIR@/trigger_program/trigger_program

# is_function_call_detected trace_file function
is_function_call_detected()
{
	trace_file_local=$1
	function_local=$2
	grep "called_${function_local}:" ${trace_file_local} &> /dev/null
}

if test $# -ne 2; then
	echo -e "Usage:\n\n\t$0 function payload"
	exit 1
fi

function=$1
payload=$2

payload_name=`echo -n $payload | sed '/\// s/^.\{0,\}\///; /\./ s/\..\{0,\}$//;'`
trace_file=${temp_dir}/${function}.trace

# Load KEDR with given payload

${kedr_control_scipt} start ${trigger_module_name} \
	-c "payload ${payload}" \
	-c "on_load mkdir -p ${kedr_debugfs_dir}" \
	-c "on_load mount debugfs -t debugfs ${kedr_debugfs_dir}" \
	-c "on_unload umount ${kedr_debugfs_dir}" \
	-c "on_load echo 1 > ${kedr_debugfs_dir}/tracing/events/${payload_name}/enable" \
	-c "on_load mkdir -p ${temp_dir}" \
	-c "on_load ${capture_trace_script} start ${trace_file} ${kedr_debugfs_dir}" \
	-c "on_unload ${capture_trace_script} stop"

if test $? -ne 0; then
	echo "Failed to start test"
	exit 1
fi

# Load trigger module as target

/sbin/insmod ${trigger_module}

if test $? -ne 0; then
	echo "Failed to start trigger module"
	${kedr_control_scipt} stop
	exit 1
fi

# Create file node for character device, added in module

major=$(awk "\$2==\"$device\" {print \$1}" /proc/devices)
if test "t$major" = "t"; then
	echo "No device found for \"$module\" module";
	/sbin/rmmod ${trigger_module}
	${kedr_control_scipt} stop
	exit 1;
fi

rm -f /dev/${device}
mknod /dev/${device} c $major 0

${trigger_program} ${function}

last_result=$?

rm -f /dev/${device}
/sbin/rmmod ${trigger_module}
sleep 0.5
${kedr_control_scipt} stop

if test $last_result -ne 0; then
	echo "Trigger program fail to trigger function call."
	exit 1
fi

grep "target_session_ends" ${trace_file} &> /dev/null
if test $? -ne 0; then
	echo "Trace file not full"
fi

if is_function_call_detected ${trace_file} ${function}; then
	echo "Controller has intercepted call to function ${function}"
	result=0
else
	echo "Controller hasn't intercepted call to function ${function} (or trigger is incorrect)"
	result=1
fi

exit ${result}