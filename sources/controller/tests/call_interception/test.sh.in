#!/bin/sh
#
# Usage:
#     test.sh function payload
# where
#	'function' - kernel function, call interception of which should be tested,
#	'payload' - call monitor payload, which replace this function

kedr_control_scipt="sh @CMAKE_BINARY_DIR@/tools/control/kedr_test"
capture_trace_until_done_script="sh @CMAKE_SOURCE_DIR@/tools/capture_trace/kedr_capture_trace_until_done.sh"
temp_dir=@KEDR_TEST_PREFIX_TEMP_SESSION@/call_interception
kedr_debugfs_dir=${temp_dir}/debugfs


device=kedr_trigger_device

trigger_module_name=trigger_module
trigger_module=@CMAKE_CURRENT_BINARY_DIR@/trigger_module/trigger_module.ko
trigger_program=@CMAKE_CURRENT_BINARY_DIR@/trigger_program/trigger_program

# is_function_call_detected trace_file function
is_function_call_detected()
{
	trace_file_local=$1
	function_local=$2
	grep "called_${function_local}:" ${trace_file_local} > /dev/null 2> /dev/null
}

if test $# -ne 2; then
	print "Usage:\n\n\t%s function payload\n" "$0"
	exit 1
fi

function=$1
payload=$2

payload_name=`printf "%s" "$payload" | sed '/\// s/^.\{0,\}\///; /\./ s/\..\{0,\}$//;'`
trace_file="${temp_dir}/${function}.trace"

# Load KEDR with given payload

${kedr_control_scipt} start "${trigger_module_name}" \
	-c "payload \"${payload}\"" \
	-c "on_load mkdir -p \"${kedr_debugfs_dir}\"" \
	-c "on_load mount debugfs -t debugfs \"${kedr_debugfs_dir}\"" \
	-c "on_unload umount \"${kedr_debugfs_dir}\"" \
	-c "on_load echo 1 > \"${kedr_debugfs_dir}/tracing/events/${payload_name}/enable\""

if test $? -ne 0; then
	printf "Failed to start test\n"
	exit 1
fi

# Load trigger module as target

/sbin/insmod "${trigger_module}"

if test $? -ne 0; then
	printf "Failed to start trigger module\n"
	${kedr_control_scipt} stop
	exit 1
fi

# Create file node for character device, added in module

major=$(awk "\$2==\"$device\" {print \$1}" /proc/devices)
if test "t$major" = "t"; then
	printf "No device found for \"%s\" module\n" "$module";
	/sbin/rmmod ${trigger_module}
	${kedr_control_scipt} stop
	exit 1;
fi

rm -f /dev/${device}
mknod /dev/${device} c $major 0

#<> [Temporary]
sleep 0.2
#<> [/Temporary]

${trigger_program} ${function}

test_result=$?

#<> [Temporary]
sleep 0.2
#<> [/Temporary]


rm -f /dev/${device}
/sbin/rmmod "${trigger_module}"

#<> [Temporary]
sleep 0.2
#<> [/Temporary]

# Capture trace
mkdir -p "${temp_dir}"
rm -f "${trace_file}"

${capture_trace_until_done_script} "${trace_file}" "${kedr_debugfs_dir}"

if test $? -ne 0; then
    printf "Some error occures while capturing trace\n"
    ${kedr_control_scipt} stop
    exit 1
fi

${kedr_control_scipt} stop

if test $test_result -ne 0; then
	printf "Trigger program fail to trigger function call.\n"
	exit $test_result
fi

# Verify, whether trace file is full
grep "target_session_ends" "${trace_file}" > /dev/null 2> /dev/null
if test $? -ne 0; then
	printf "Trace file not full\n"
    # Only warning, not error
fi

if is_function_call_detected ${trace_file} ${function}; then
	printf "Controller has intercepted call to function %s\n" "${function}"
	result=0
else
	printf "Controller hasn't intercepted call to function %s (or trigger is incorrect)\n" "${function}"
	result=1
fi

exit ${result}
