#!/bin/sh

newline='
'
# Usage: 
# kedr.sh start target_name [-c conf_string(s) | conf_file] ...
# kedr.sh stop
# kedr.sh restart
# kedr.sh status
#
# 'start' - start KEDR, when it is not started, for watching for given target.
# Use config file @KEDR_FILE_DEFAULT_CONTROL_CONFIG@, if no other arguments are passed.
# Otherwise, join config strings and config files, passed to it, into one config file,
# and use it instead default.
#
# 'stop' - stop KEDR, if it was running.
#
# 'restart' - stop KEDR and start it with same configuration.
#
# 'status' - output current state of KEDR.

# default config file
default_config_file=@KEDR_FILE_DEFAULT_CONTROL_CONFIG@

# commands for kernel module control
MODPROBE=/sbin/modprobe
INSMOD=/sbin/insmod
RMMOD=/sbin/rmmod

# directory for temporary files
tmp_dir=@KEDR_PREFIX_TEMP_SESSION@/control
# Point for mount debugfs filesystem for enable tracing points in controller module
# (!!!) This directory should not be used by capture trace functionality for same purpose, because
# capturing trace will be running BEFORE controller, so after it run, debugfs should be always mounted.
# But after enabling tracpoints for controller, it umount debugfs from its local directory

controller_debugfs_mount_point=${tmp_dir}/controller_debugfs

# commands(in format of config file), used for last start KEDR
start_conf_file=${tmp_dir}/start.conf


if test $# -eq 0; then
    printf "'start', 'stop' or 'status' command should be specified\n"
    exit 1
fi

# execute command_line
#
# Execute command line, passed to it.
execute()
{
#    printf "%s\n" "execute: $*"
    eval $*
}

# get_module_name module_file|module_name
#
# For module file, return name of module, for module name return itself
get_module_name()
{
    printf "%s" "$1" | sed 's/^.*\///;s/\..*$//'
}

# is_module_running module_name
#
# Determine, whether module with given name(not from module file!), is currently running.
is_module_running()
{
    /sbin/lsmod | grep "^$1[[:blank:]]\{1,\}" > /dev/null
}

# resolve_module_alias alias
#
# If given parameter is alias for some module, return name of this module.
# Otherwise, return parameter itself, as if it is module name.
resolve_module_alias()
{
    #not implemented yet
    printf "%s" "$1"
}

# collect_conf_file target_file [-c conf_string | conf_file]...
#
# Build config file from pieses: config string or config files.
# If target file exists - append.
collect_conf_file()
{
    target_conf_file=$1
    shift
    while test $# -gt 0; do
        if test "$1" = "-c"; then
            shift
            if test $# -eq 0; then
                printf "After '-c' parameter should be config string(s)\n"
                rm -f ${target_conf_file}
                exit 1
            fi
            printf "%s\n" "$1" >> "${target_conf_file}"
        else
            cat "$1" >> "${target_conf_file}"
            printf "\n" >> "${target_conf_file}"
        fi
        shift
    done
}

# Some regular expressions for parsing configuration file
regex_parse_conf="  /^#/ d;\
                    /^[[:blank:]]\{0,\}$/ d;\
                    s/^on_load[[:blank:]]\{1,\}//; t on_load;\
                    s/^on_unload[[:blank:]]\{1,\}//; t on_unload;\
                    s/^module[[:blank:]]\{1,\}//; t module;\
                    s/^payload[[:blank:]]\{1,\}//; t payload;\
                    b error;"

alias_alphabet="[^\.\/[:blank:]]"
regex_is_alias="/^${alias_alphabet}\{1,\}\([[:blank:]]\|$\)/ b alias; b notalias"

# parse_conf_payloads conf_file
#
# Translate config file to the payloads list.
# Each payload is prepended with a string, determine its type:
# 'm' - module name, 'a' - probably, alias(or module name).
parse_conf_payloads()
{
    sed -n -e  "${regex_parse_conf}" -e ":payload; s/[[:blank:]].\{0,\}//;" -e "${regex_is_alias}" \
            -e ":alias; s/^/a\n/p; d; :notalias; s/^.\{0,\}\///; s/\..\{0,\}$//; s/^/m\n/p; d" \
            -e ":on_load; :on_unload; :module; :error; d" "$1"
}

# parse_conf_on_load conf_file
#
# Translate config file to the list of commands for loading KEDR.
# Each command string is prepended with a string, contains ordinal number of the source string.
parse_conf_on_load()
{
    sed -n -e "${regex_parse_conf}" -e ":module; :payload; ${regex_is_alias};" \
            -e ":alias; s!^!/sbin/modprobe !; b out; :notalias; s!^!/sbin/insmod !; b out;" \
            -e ":on_load; b out; :on_unload; d" \
            -e ":error; s/^/printf \"%s\\\\n\" \"Incorrect config line '/; s/$/'\"/;" \
            -e ":out; =; p; " "$1"
}

# parse_conf_on_unload conf_file [line_number]
#
# Translate config file to the list of commands for unloading KEDR.
# Optional line_number argument means to translate
# only up to 'line_number' line(exclusive) in the configuration file.
parse_conf_on_unload()
{
    if test $2; then
        up_to_line="${2}q"
    else
        up_to_line=":start"
    fi
    sed -n  -e ${up_to_line} -e "${regex_parse_conf}" -e ":module; :payload; s/[[:blank:]].\{0,\}//; ${regex_is_alias};"\
            -e ":alias; s!^!/sbin/modprobe -r !; b out; :notalias; s!^!/sbin/rmmod !; b out;"\
            -e ":on_unload; b out; :on_load; d"\
            -e ":error; s/^/printf \"%s\\\\n\" \"Incorrect config line '/; s/$/'\"/;"\
            -e ":out; p; " "$1" | sed '1!G;h;$!d'
}

# list_loaded_payloads conf_file
#
# Output names(one for line) of those payloads modules, which is currently running.
list_loaded_payloads()
{
    OLD_IFS=${IFS}
    IFS="$newline"
    # Output parsing results into file for debugging purposes.
    parse_conf_payloads "$1" > ${tmp_dir}/payloads_tmp.txt
    payload_type=
    for LINE in `cat ${tmp_dir}/payloads_tmp.txt`; do
        IFS=${OLD_IFS}
        if test -z ${payload_type}; then
            # Store type of payload.
            payload_type=${LINE}
        else
            payload_name=${LINE}
            if test ${payload_type} = "a"; then
                payload_name=`resolve_module_alias ${payload_name}`
            fi
            if is_module_running $payload_name; then 
                printf "%s\n" "${LINE}"
            fi
        fi
        IFS="$newline"
    done;
    IFS=${OLD_IFS}
}

# execute_conf_on_load conf_file
#
# Execute lines in the configuration file in 'on_load' mode.
execute_conf_on_load()
{
    OLD_IFS=${IFS}
    IFS="$newline"
    # Output parsing results into file for debugging purposes.
    parse_conf_on_load "$1" > ${tmp_dir}/commands_tmp.txt
    line_number=
    for LINE in `cat ${tmp_dir}/commands_tmp.txt`; do
        IFS=${OLD_IFS}
        if test -z ${line_number}; then
            # Store executed line for rollback in case of error, when this line will be executed.
            line_number="${LINE}"
        else
            if ! execute ${LINE}; then 
                printf "Fail to execute commands for start.. rollback.\n"
                rollback "${start_conf_file}" "$line_number"
                return 1
            fi
            line_number=
        fi
        IFS="$newline"
    done;
    IFS=${OLD_IFS}
}

# execute_conf_on_unload conf_file
#
# Execute lines in the configuration file in 'on_load' mode.
execute_conf_on_unload()
{
    OLD_IFS=${IFS}
    IFS="$newline"
    for LINE in `parse_conf_on_unload $1`; do
        IFS=${OLD_IFS}
        execute ${LINE}
        IFS="$newline"
    done;
    IFS=${OLD_IFS}
}
# rollback conf_file string_number
#
# Rollback first 'string_number' commands from the config files(performs unload operation for them)
rollback()
{
    OLD_IFS=${IFS}
    IFS="$newline"
    for LINE in `parse_conf_on_unload ${start_conf_file} $2`; do
        IFS=${OLD_IFS}
        execute ${LINE}
        IFS="$newline"
    done;
    IFS=${OLD_IFS}
}


base_name=`get_module_name @KEDR_FILE_BASE@`
controller_name=`get_module_name @KEDR_FILE_CONTROLLER@`
target_name=
command=$1
shift
#
base_is_running=0
controller_is_running=0
target_is_running=0

# Collect status information of KEDR
if is_module_running ${base_name}; then
    base_is_running=1
    if is_module_running ${controller_name}; then
        controller_is_running=1
        target_name=`cat /sys/module/${controller_name}/parameters/target_name`
        if is_module_running ${target_name}; then
            target_is_running=1
        fi
    fi
fi

case ${command} in
start)
    if test ${base_is_running} -ne 0; then
        printf "%s\n" "Service already running. For stop it call '$0 stop'"
        exit 1
    fi
    if test $# -eq 0; then
        printf "For start command name of the target module should be specified as the second argument\n"
        exit 1
    fi
    target_name=`get_module_name "$1"`
    shift
    if is_module_running ${target_name}; then
        printf "Cannot start KEDR for watch target module, which is currently loaded. Unload target module firstly.\n"
        exit 1
    fi
    printf "Starting KEDR...\n"
    #collect all parts of the configuration to the ${start_conf_file}
    mkdir -p ${tmp_dir} || (printf "Cannot create directory for temporary files\n" && exit 1)
    #empty file
    printf "\n" > "${start_conf_file}"
    if test $? -ne 0; then
        printf "Cannot write to temporary file\n"
        exit 1
    fi
    collect_conf_file "${start_conf_file}" -c "module @KEDR_FILE_BASE@"
    if test $# -eq 0; then
        collect_conf_file "${start_conf_file}" "${default_config_file}"
    else
        collect_conf_file "${start_conf_file}" "$@"
    fi
    collect_conf_file "${start_conf_file}" -c "module @KEDR_FILE_CONTROLLER@ target_name=${target_name}"
    # Enable tracepoints for controller
    collect_conf_file "${start_conf_file}" -c "on_load mkdir -p \"${controller_debugfs_mount_point}\"" \
                                            -c "on_load mount debugfs -t debugfs \"${controller_debugfs_mount_point}\"" \
                                            -c "on_load printf 1 > \"${controller_debugfs_mount_point}/tracing/events/${controller_name}/enable\"" \
                                            -c "on_load umount \"${controller_debugfs_mount_point}\""

    execute_conf_on_load "${start_conf_file}"
    if test $? -ne 0; then
        # In the release version next line should be uncommented
        #rm -f "${start_conf_file}"
        exit 1
    fi
    printf "KEDR started.\n"
    ;;
stop)
    if test ${base_is_running} -eq 0; then
        printf "Service is not running. For start it call '%s start'\n" "$0"
        exit 1
    fi
    if test ${target_is_running} -ne 0; then
        printf "Cannot stop KEDR when it watched for target module, which is currently loaded. Unload target module firstly.\n"
        exit 1
    fi
    printf "Stopping KEDR...\n"
    execute_conf_on_unload "${start_conf_file}"
    rm -f "${start_conf_file}"
    printf "%s\n" "KEDR stopped."
    ;;
status)
    if test ${base_is_running} -ne 0; then
        printf "Base is running, payloads:\n"
        list_loaded_payloads "${start_conf_file}"
        if test ${controller_is_running} -ne 0; then
            printf "%s\n" "Controller is running, target is '${target_name}'"
            if test ${target_is_running} -ne 0; then
                printf "Target is running\n"
            else
                printf "Target is not running\n"
            fi;
        else
            printf "Controller is not running\n"
        fi;
    else
        printf "Base is not running\n"
    fi;
    ;;
restart)
    if test ${base_is_running} -eq 0; then
        printf "%s\n" "Service is not running. For start it call '$0 start'"
        exit 1
    fi
    if test ${target_is_running} -ne 0; then
        printf "Cannot stop KEDR when it watched for target module, which is currently loaded. Unload target module firstly.\n"
        exit 1
    fi
    printf "Stopping KEDR...\n"
    execute_conf_on_unload "${start_conf_file}"
    if is_module_running "${base_name}"; then
        printf "Failed to stop KEDR\n"
        exit 1
    fi
    printf "Starting KEDR...\n"
    execute_conf_on_load "${start_conf_file}"
    if test $? -ne 0; then
        printf "Failed to start KEDR again.\n"
        rm -f "${start_conf_file}"
        exit 1
    fi
    printf "KEDR started.\n"
    ;;
*)
    printf "%s\n" "Incorrect command '$command' to service, should be 'start', 'stop', 'restart' or 'status'."
esac